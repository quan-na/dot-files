;; >>>>>>> START re-organizing configuration

;; >>> START global interface fix
;; fix key M S C in mac
(set-keyboard-coding-system nil)
;; do not show help
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
;; monospace font for better drawing
;; declare a font variable
(setq mono-font-face "Source Code Pro")
(setq mono-font-size "13")
(setq mono-font-weight 'light)
(when (display-graphic-p)
  ;(add-to-list 'default-frame-alist
  ;             '(font . (concat mono-font-face "-" mono-font-size ":weight=" (symbol-name mono-font-weight))))
  (set-face-attribute 'default nil
                      :family mono-font-face :height (* 10 (string-to-number mono-font-size)) :weight mono-font-weight)
  (set-face-attribute 'fixed-pitch nil :font (concat mono-font-face "-" mono-font-size) :weight mono-font-weight)
  (set-face-attribute 'variable-pitch nil :font (concat mono-font-face "-" mono-font-size) :weight mono-font-weight)
  )
(when (display-graphic-p)
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-level-1 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-2 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-3 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-4 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-5 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-document-title ((((class color) (min-colors 89)) (:inherit variable-pitch :foreground "#DC143C" :height 1.0)))))
)
;; disable all dialog
(defadvice yes-or-no-p (around prevent-dialog activate)
  "Prevent yes-or-no-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice y-or-n-p (around prevent-dialog-yorn activate)
  "Prevent y-or-n-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice message-box (around prevent-dialog activate)
  "Prevent message-box from activating a dialog"
  (apply #'message (ad-get-args 0)))
;; disable scrollbar
(when (display-graphic-p)
  (scroll-bar-mode -1)
)
(setq mouse-wheel-progressive-speed nil)
;; kill toolbar too
(menu-bar-mode -1)
(when (display-graphic-p)
  (tool-bar-mode -1)
)
;; RET auto-indent
;(define-key global-map (kbd "RET") 'newline-and-indent)
;; spaces for tabs
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default indent-line-function 'insert-tab)
(electric-indent-mode -1)
;;(setq-default tab-stop-list (number-sequence 2 200 2))
;; enable navigate with arrows
(defun disable-guru-mode ()
  (guru-mode -1))
(add-hook 'prelude-prog-mode-hook 'disable-guru-mode t)
;;(setq visible-bell t)
;;(setq visible-bell 'top-bottom)
(setq ring-bell-function 'ignore)
;; icicle
;(icomplete-mode 99)
;; line display
(line-number-mode t)
(column-number-mode t)
(global-hl-line-mode 1)
(setq-default truncate-lines t)
;; disable auto-save
(setq auto-save-default nil)
(setq create-lockfiles nil)
;; IDO every where
;(setq ido-enable-flex-matching t)
;(setq ido-everywhere t)
;(ido-mode 1)
;; random quote inspiration, got from yitang@github.com
(defconst yt/quotes
  '(;; Fantasy novels
    "Only in silence the word, Only in dark the light, Only in dying life, \
Bright the hawk's flight On the empty sky. -- Ursula K. Le Guin"
    "When you light a candle, you also cast a shadow. -- Ursula K. Le Guin"
    "Sometimes asking questions is more important than finding answers. -- Robert Jordan"
    "I’m bad, and that’s good. I will never be good, and that’s not bad. There’s no one I’d rather be than me. -- Wreck-It Ralph"
    "It's the questions we can't answer that teach us the most. They teach us how to think. \
If you give a man an answer, all he gains is a little fact. But give him a question and he'll look for his own answers. -- Patrick Rothfuss"
    "People see madness in my colorful vibrancy and fail to see the madness in their boring normality -- Mad Hater"
    "Greed can be a very powerful ally - Qui-Gon Jinn"
    "The ability to speak does not make you intelligent -- Qui-Gon Jinn"
    "Do or do not... there is no try. -- Yoda"
    "Your eyes can deceive you; don't trust them. -- Obi-Wan Kenobi"
    "What is evil? - The web we man weave. -- Ged"
    "My wisdom is from experience; My passion come from pain; My confidence hides insecurity; My weakness make me stronger; My past does not define me; My strength is an illusion; My calm hid a storm; My innocence is not ignorance; My cabbages - My cabbages!! -- Avatar"
    ;; Scientists
    "The important thing is not to stop questioning. -- Albert Einstein"
    "Two things are infinite: the universe and human stupidity; and I'm not sure about the universe. -- Albert Einstein"
    "The most beautiful experience we can have is the mysterious. It is the fundamental emotion that stands at the cradle of true art \
and true science. -- Albert Einstein"
    "Whatever I have up till now accepted as most true and assured I have gotten either from the senses or through the senses. \
But from time to time I have found that the senses deceive, and it is prudent never to trust completely those who have deceived us \
even once. -- Rene Descartes"
    "Creativity is intelligence having fun. -- Albert Einstein"
    "Science is what we understand well enough to explain to a computer. Art is everything else -- Donald Ervin Knuth"
    "It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures. -- Alan Perlis"
    ;; Confucius
    "Life is really simple, but we insist on making it complicated. -- Confucius"
    "The best time to plant a tree is 20 years ago, the second best time is now. -- Chinese proverb"
    ;; Politics
    "In the end, it's not the years in your life that count. It's the life in your years. -- Abraham Lincoln"
    "Be the change that you wish to see in the world. --  Mahatma Gandhi"
    "There is no such thing as 'American English'. There is English. And there are mistakes. -- Elizabeth Windsor"
    ;; Business men
    "Innovation distinguishes between a leader and a follower. -- Steve Jobs"
    "Creativity and innovation are something you can't flowchart out. -- Tim Cook"
    "People will forget what you said, people will forget what you did, but people will never forget how you made them feel -- Maya Angelou"
    "Everything you want is on the other side of fear. -- Jack Canfield"
    "Ideas are easy. Implementation is hard. -- Guy Kawasaki"
    ;; Buddhism
    "The purpose of our lives is to be happy. -- Dalai Lama"
    "Better than a thousand hollow words, is one word that brings peace. -- Buddha"
    "What we think, we become. -- Buddha"
    ;; Poetry - Actors - Artist
    "You talk when you cease to be at peace with your thoughts. -- Kahlil Gibran"
    "No matter what people tell you, words and ideas can change the world. -- Robin Williams"
    "The unfed mind devours itself. -- Gore Vidal"
    "A creative mess is better than idle tidiness. -- Michael J. Fox"
    "I can't understand why people are frightened of new ideas. I'm frightened of the old ones. -- John Cage"
    "Someday is not a day of the week. -- Janet Dailey"
    "It is the greatest of all mistakes to do nothing because you can do only a little. Do what you can. -- Sydney Smith"
    "The role of art is not to reproduce visible objects, but to make invisibles visible. -- Paul Klee"
    ;; Taoism
    "Those who know do not speak. Those who speak do not know. -- Lao Tzu"
    "The truth is not always beautiful, nor beautiful words the truth. -- Lao Tzu"
    "A man with outward courage dares to die; a man with inner courage dares to live. -- Lao Tzu"
    "Trying to understand is like straining through muddy water. Have the patience to wait! Be still and allow the mud to settle. -- Lao Tzu"
    ;; Martial Artist
    "There is nothing outside of yourself that can ever enable you to get better, stronger, richer, quicker, or smarter. Everything is within. Everything exists. Seek nothing outside of yourself. -- Miyamoto Musashi"
    "Under the sword lifted high, there is hell making you tremble. But go ahead, and you have the land of bliss. -- Miyamoto Musashi"
    ;; Greek
    "Death is nothing to us, since when we are, death has not come, and when death has come, we are not. -- Epicurus"
    ;; Funny
    "Not everyone likes me, but not everyone matters -- 9gag"
    "Listen. The only time you should look in your neighbor 's bowl is to make sure that they have enough. You don't look in your neighbor 's bowl to see if you have ... as much as them. -- 9gag"
    "If stupid you are, speak you should not. -- 9gag"
    )
  "Good quotes
   they can be useful for creative writers as well.")
(defun yt/show-random-quotes ()
  "Show random quotes to minibuffer"
  (interactive)
  (message "%s"
           (nth (random (length yt/quotes))
                yt/quotes)))
(run-with-idle-timer 60 t 'yt/show-random-quotes)
;; utility function for showing colors
(defun xah-syntax-color-hex ()
  "Syntax color text of the form 「#ff1100」 in current buffer.
URL `http://ergoemacs.org/emacs/emacs_CSS_colors.html'
Version 2016-03-15"
  (interactive)
  (font-lock-add-keywords
   nil
   '(("#[ABCDEFabcdef[:digit:]]\\{6\\}"
      (0 (put-text-property
          (match-beginning 0)
          (match-end 0)
          'face (list :background (match-string-no-properties 0)))))))
  (font-lock-fontify-buffer))
;; Highlight TODO, FIXME, and BUG in programming modes
(defun xah-syntax-todo ()
  "Syntax color TODO items"
  ;(interactive)
  (font-lock-add-keywords
   nil
   '(("\\s-\\(FIXME\\|TODO\\|BUG\\)\\(\\s-\\|:\\)"
      (0 (put-text-property
          (match-beginning 0)
          (match-end 0)
          'face (list :foreground "#DC143C" :weight 'bold))))))
  (font-lock-fontify-buffer))
(add-hook 'prog-mode-hook 'xah-syntax-todo)
;; view large files instead of editing it 
(defun my-find-file-check-make-large-file-read-only-hook ()
  "If a file is over a given size, make the buffer read only."
  (when (> (buffer-size) (* 1024 1024))
    (setq buffer-read-only t)
    (buffer-disable-undo)
    (fundamental-mode)))
(add-hook 'find-file-hooks 'my-find-file-check-make-large-file-read-only-hook)
;; <<< E N D global interface fix

;; >>> START package manager
;; melpa package repository
(require 'package)
;;(add-to-list 'package-archives
;;  '("melpa" . "http://melpa.milkbox.net/packages/") t)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("org" . "http://orgmode.org/elpa/")
                         ("sunrisec" . "http://joseito.republika.pl/sunrise-commander/")))
;; uncomment after cleaning up
(package-refresh-contents)
(package-initialize)
;; install dash for emacs lisp syntax candy
(unless (package-installed-p 'dash)
  (package-install 'dash))
(require 'dash)
(defun -install (package-name)
  (unless (package-installed-p package-name)
    (package-install package-name)))
;; themes
(-map '-install '(solarized-theme
                  zenburn-theme
                  ;obsidian-theme
                  inkpot-theme
                  monokai-theme
                  ;ample-theme
                  ;subatomic256-theme
                  badwolf-theme
                  tao-theme
                  gotham-theme
                  ;borland-blue-theme
                  base16-theme
                  ))
;; generic eye candies
(-map '-install '(rainbow-delimiters
                  relative-line-numbers
                  golden-ratio
                  ))
; removed : auto-complete
; removed : evil, rainbow blocks
; removed : clojure, scala
;; lua development
(-map '-install '(lua-mode
                  cc-mode
                  haskell-mode
                  web-mode
                  web-beautify
                  json-mode
                  markdown-mode
                  fish-mode
                  mmm-mode
                  rust-mode
                  llvm-mode
                  ))
;; Organization
(-map '-install '(org
                  babel
                  deft
                  projectile
                  ggtags
                  ))
;; removed : Sunrise Commander
; removed : keychord
(-map '-install '(sr-speedbar
                  hydra
                  undo-tree
                  ))
; removed 'imenu
; removed : smartparens, eclim, company, polymode
; use helm instead of ido
(-map '-install '(helm
                  helm-swoop
                  helm-projectile
                  helm-ag
                  company
                  fasd
                  ))
; remove ac-helm
;; Writing
(-map '-install '(flyspell
                  artbollocks-mode
                  synosaurus
                  ))
;; Clojure development
(-map '-install '(clojure-mode
                  clojure-mode-extra-font-locking
                  cider
                  ))
;; compile installed packages
(byte-recompile-directory (expand-file-name "~/.emacs.d") 0)
;; <<< E N D package manager

;; >>> START themes
;; theme setting
(if (not (display-graphic-p))
    (load-theme 'badwolf t)
  (load-theme 'base16-mirosof-royal-dark t)
  )
;;cursor
(when (display-graphic-p)
  (setq-default cursor-type '(hbar . 7)) ; 'hollow 'box 'bar 'hbar
  (set-cursor-color "#4169E1") ; Royal Blue, old:#6AFB92 dragon green
  (blink-cursor-mode -1)
  )
;;transparency
(when (and (display-graphic-p) nil)
    (set-frame-parameter (selected-frame) 'alpha '(85 50))
)
;; <<< E N D themes

;; >>> START fancy mode line
;; fancier mode-line
(when t
  ;; Mode line setup
  (setq-default
   mode-line-format
   '(; Clock
     (:eval (propertize (format-time-string "%H:%M")
              'help-echo
              (concat (format-time-string "%c; ")
                      (emacs-uptime "Uptime:%hh"))
              'face 'mode-line-clock-face))
     ; Position, including warning for 80 columns
     (:propertize "%4l:" face mode-line-position-face)
     (:eval (propertize "%3c" 'face
                        (if (>= (current-column) 80)
                            'mode-line-80col-face
                          'mode-line-position-face)))
     ;emacsclient [default -- keep?]
     mode-line-client
     " "
     ; read-only or modified status
     (:eval
      (cond (buffer-read-only
             (propertize "RO" 'face 'mode-line-read-only-face))
            ((buffer-modified-p)
             (propertize "**" 'face 'mode-line-modified-face))
            (t "  ")))
     (:propertize (:eval (make-string-pos 10))
                  face mode-line-cursor-face)
     ;" "
     ; directory and buffer/file name
     ;(:propertize (:eval (shorten-directory default-directory 30))
     ;             face mode-line-folder-face)
     (:propertize (:eval (abbrev-directory default-directory))
             face mode-line-folder-face)
     (:propertize "%b"
                  face mode-line-filename-face)
     ; narrow [default -- keep?]
     " %n "
     ; mode indicators: vc, recursive edit, major mode, minor modes, process, global
     (vc-mode vc-mode)
     "  %["
     (:propertize mode-name
                  face mode-line-mode-face)
     "%] "
     (:eval (propertize (format-mode-line minor-mode-alist)
                        'face 'mode-line-minor-mode-face))
     (:propertize mode-line-process
                  face mode-line-process-face)
     (global-mode-string global-mode-string)
     " "
     (:propertize mode-line-note
                  face mode-line-note-face)
     mode-line-end-spaces
     ; nyan-mode uses nyan cat as an alternative to %p
     ;(:eval (when nyan-mode (list (nyan-create))))
     ))

  ;; Display a small note to indicate what I am to do
  (setq mode-line-note nil)
  (defun mode-line-note-off ()
    (interactive)
    (setq mode-line-note nil)
    (force-mode-line-update))
  (defun mode-line-note-set (note-text)
    (interactive "s::")
    (if mode-line-note
        (setq mode-line-note (concat note-text " < " mode-line-note))
      (setq mode-line-note note-text))
    (when (> (length mode-line-note) 52)
      (setq mode-line-note (substring mode-line-note 0 52))
      )
    (force-mode-line-update))
  ;; Helper function
  (defun shorten-directory (dir max-length)
    "Show up to `max-length' characters of a directory name `dir'."
    (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
          (output ""))
      (when (and path (equal "" (car path)))
        (setq path (cdr path)))
      (while (and path (< (length output) (- max-length 4)))
        (setq output (concat (car path) "/" output))
        (setq path (cdr path)))
      (when path
        (setq output (concat ".../" output)))
      output))
  (defun abbrev-directory (dir)
    "Show only 1 character for each parent dir"
    (mapconcat 'identity
               (mapcar (lambda (x)
                         (if (equal x "") x (substring x 0 1)))
                       (split-string (abbreviate-file-name dir) "/")) "/")
    )
  ;; cursor position
  (defun make-string-pos(len)
    "Show current position with characters"
    (let ((pos-len (/ (* len (point)) (point-max)))
          )
      (concat "<" (make-string pos-len ?-) "+" (make-string (- len pos-len) ?-) ">")
      )
    )
  ;; Extra mode line faces
  (make-face 'mode-line-read-only-face)
  (make-face 'mode-line-modified-face)
  (make-face 'mode-line-folder-face)
  (make-face 'mode-line-filename-face)
  (make-face 'mode-line-position-face)
  (make-face 'mode-line-mode-face)
  (make-face 'mode-line-minor-mode-face)
  (make-face 'mode-line-process-face)
  (make-face 'mode-line-80col-face)
  (make-face 'mode-line-clock-face)
  (make-face 'mode-line-note-face)
  (make-face 'mode-line-cursor-face)

  (set-face-attribute 'mode-line-clock-face nil
                      :inherit 'mode-line-face
                      :foreground "#659EC7"
                      :box '(:line-width 2 :color "#659EC7"))
  (set-face-attribute 'mode-line nil
                      :foreground "gray60" :background "gray20"
                      :inverse-video nil
                      :box '(:line-width 2 :color "gray20" :style nil))
  (set-face-attribute 'mode-line-inactive nil
                      :foreground "gray80" :background "gray40"
                      :inverse-video nil
                      :box '(:line-width 2 :color "gray40" :style nil))

  (set-face-attribute 'mode-line-read-only-face nil
                      :inherit 'mode-line-face
                      :foreground "#4271ae"
                      :box '(:line-width 2 :color "#4271ae"))
  (set-face-attribute 'mode-line-modified-face nil
                      :inherit 'mode-line-face
                      :foreground "#c82829"
                      :background "#ffffff"
                      :box '(:line-width 2 :color "#c82829"))
  (set-face-attribute 'mode-line-folder-face nil
                      :inherit 'mode-line-face
                      :foreground "gray60")
  (set-face-attribute 'mode-line-filename-face nil
                      :inherit 'mode-line-face
                      :foreground "#eab700"
                      :weight 'bold)
  (set-face-attribute 'mode-line-position-face nil
                      :inherit 'mode-line-face
                                        ;:family "Menlo" :height 100
                      )
  (set-face-attribute 'mode-line-mode-face nil
                      :inherit 'mode-line-face
                      :foreground "gray80")
  (set-face-attribute 'mode-line-minor-mode-face nil
                      :inherit 'mode-line-mode-face
                      :foreground "gray40"
                                        ;:height 110
                      )
  (set-face-attribute 'mode-line-process-face nil
                      :inherit 'mode-line-face
                      :foreground "#718c00")
  (set-face-attribute 'mode-line-80col-face nil
                      :inherit 'mode-line-position-face
                      :foreground "black" :background "#eab700")
  (set-face-attribute 'mode-line-note-face nil
                      :inherit 'mode-line-face
                      :foreground "#DC143C" ; Crimson
                      )
  (set-face-attribute 'mode-line-cursor-face nil
                      :inherit 'mode-line-face
                      :foreground "#4169E1"
                      )
  )
;; <<< E N D fancy mode line

;; >>> START writting
(when (and (package-installed-p 'flyspell)
           (package-installed-p 'artbollocks-mode)
           (package-installed-p 'synosaurus))
  ;; check spelling
  (custom-set-faces
   '(flyspell-incorrect ((t (:background "#DC143C")))))
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'latex-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  ;; spell check config
  (setq ispell-dictionary "american"
        ispell-extra-args '( "-t" ) ;; TeX mode "-t"
        ispell-silently-savep t)
  ;; block dangerous words
  (require 'artbollocks-mode)
  (add-hook 'text-mode-hook 'artbollocks-mode)
  (add-hook 'latex-mode-hook 'artbollocks-mode)
  (setq artbollocks-weasel-words-regex
        (concat "\\b" (regexp-opt
                       '("should"
                         "just"
                         "sort of"
                         "a lot"
                         "probably"
                         "maybe"
                         "perhaps"
                         "I think"
                         "really"
                         "nice") t) "\\b"))
  ;; synosaurus
  ;; brew install wordnet
  (require 'synosaurus)
  (setq synosaurus-choose-method "popup")

  ;; synosaurus-lookup C-c s l
  ;; synosaurus-choose-and-replace C-c s r
  (setq synosaurus-backend 'synosaurus-backend-wordnet)
  (setq synosaurus-choose-method 'popup)
  )
;; <<< E N D writting

;; >>> START golden ratio
(when (package-installed-p 'golden-ratio)
  (require 'golden-ratio)
  (golden-ratio-mode 1)
  )
;; <<< E N D golden ratio

;; >>> START fasd
(when (package-installed-p 'fasd)
  (global-fasd-mode 1)
  )
;; <<< E N D fasd

;; >>> START web mode
(when (package-installed-p 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (setq web-mode-engines-alist
        '(("php"    . "\\.phtml\\'")
          ("blade"  . "\\.blade\\."))
        )
  (setq web-mode-code-indent-offset 4)
  (setq web-mode-indent-style 4)
  )
;; <<< E N D web mode

;; >>> START tengwar org-mode
(when (and nil (package-installed-p 'org))
  (custom-set-faces
   ;; set tengwar region between #+begin_verse and #+end_verse
   '(org-verse ((((class color) (min-colors 89)) (:inherit variable-pitch :foreground "#BCC6CC" :family "Tengwar Annatar" :height 1.7)))))
  (custom-set-variables
   '(org-fontify-quote-and-verse-blocks t))
  (quail-define-package
   "tengwar-e2002" "Tengwar" "TE" t
   "Quanna’s personal input method defining tengwar characters"
   nil t nil nil nil nil nil nil nil nil t)
  ; TODO: need alot of refinement
  (quail-define-rules
   ("a1" ?C) ; left most
   ("a2" ?D) ; second left
   ("a3" ?E) ; second right
   ("a4" ?#) ; right most
   ("b" ?w) ; b
   ("c" ?z) ; c
   ("d" ?2) ; d
   ("e" ?F) ; sounded e
   ("E" ?Ê) ; silence e
   ("f" ?e) ; f
   ("g" ?x) ; g
   ("h" ?9) ; h
   ("i" ?B) ; i
   ("j" ?f) ; j
   ("k" ?z) ; k=c
   ("l" ?j) ; l
   ("m" ?t) ; m
   ("n" ?5) ; n
   ("o" ?N) ; o
   ("p" ?q) ; p
   ("qu" ["zê"]) ; qu
   ("r" ?7) ; sounded r
   ("R" ?6) ; silence r
   ("s" ?8) ; main s
   ("S" ?i) ; alternate s
   ("t" ?1) ; t
   ("u1" ?M) ; variant 1
   ("u2" ?J) ; variant 2
   ("u3" ?&) ; variant 3
   ("v" ?r) ; v
   ("w" ?y) ; w
   ("x" ["z|"]) ; x
   ("y" ?n) ; cons y
   ("Y" ?Í) ; vowel y
   ("z" ?k) ; main z
   ("Z" ?,) ; alternate z
   ("." ?-) ; dot
   ("," ?=) ; comma
   ("th" ?3) ; th
   ("ch" ?c) ; ch
   ("sh" ?d) ; sh
   ("nt" ["1p"]) ; nt
   ("nd" ["2p"]) ; nd
   ("mp" ["qp"]) ; mp
   ("mb" ["wP"]) ; mb
   ("ie" ["BË"]) ; ie ?
   ("ee" ["~V"]) ; ee 
   ) 
  )
;; <<< E N D tengwar org-mode

;; >>> START smartparens
(when (package-installed-p 'smartparens)
  (require 'smartparens-config)
  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
  )
;; <<< E N D smartparens

;; >>> START rainbow mode
(when (package-installed-p 'rainbow-delimiters)
  (require 'rainbow-delimiters)
  ;; rainbow delimiters
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  ;; true rainbow color for rainbow blocks
  (set-face-attribute 'rainbow-delimiters-mismatched-face nil
                      :foreground "#C0C0C0" :background "#8B0000")
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground "#E6E7E8" :background "#8B0000")
  (set-face-attribute 'rainbow-delimiters-depth-1-face nil
                      :foreground "#FF0033")
  (set-face-attribute 'rainbow-delimiters-depth-2-face nil
                      :foreground "#FF8C00")
  (set-face-attribute 'rainbow-delimiters-depth-3-face nil
                      :foreground "#FFD700")
  (set-face-attribute 'rainbow-delimiters-depth-4-face nil
                      :foreground "#90EE90")
  (set-face-attribute 'rainbow-delimiters-depth-5-face nil
                      :foreground "#000080")
  (set-face-attribute 'rainbow-delimiters-depth-6-face nil
                      :foreground "#800080")
  (set-face-attribute 'rainbow-delimiters-depth-7-face nil
                      :foreground "#DA70D6")
  (set-face-attribute 'rainbow-delimiters-depth-8-face nil
                      :foreground "#FF69B4")
  (set-face-attribute 'rainbow-delimiters-depth-9-face nil
                      :foreground "#A52A2A")
  )
;; rainbow blocks in org
(when (package-installed-p 'rainbow-blocks)
  (require 'rainbow-blocks)
  (add-hook 'org-mode-hook 'rainbow-blocks-mode)
  ;; true rainbow color for rainbow blocks
  (set-face-attribute 'rainbow-blocks-unmatched-face nil
                      :foreground "#8B0000")
  (set-face-attribute 'rainbow-blocks-depth-1-face nil
                      :foreground "#FF0033")
  (set-face-attribute 'rainbow-blocks-depth-2-face nil
                      :foreground "#FF8C00")
  (set-face-attribute 'rainbow-blocks-depth-3-face nil
                      :foreground "##FFD700")
  (set-face-attribute 'rainbow-blocks-depth-4-face nil
                      :foreground "#90EE90")
  (set-face-attribute 'rainbow-blocks-depth-5-face nil
                      :foreground "#000080")
  (set-face-attribute 'rainbow-blocks-depth-6-face nil
                      :foreground "#800080")
  (set-face-attribute 'rainbow-blocks-depth-7-face nil
                      :foreground "#DA70D6")
  (set-face-attribute 'rainbow-blocks-depth-8-face nil
                      :foreground "#FF69B4")
  (set-face-attribute 'rainbow-blocks-depth-9-face nil
                      :foreground "#A52A2A")
)
;; <<< E N D rainbow mode

;; >>> START auto-complete configuration
(when (package-installed-p 'auto-complete)
  ;; Auto complete
  (require 'auto-complete-config)
  (ac-config-default)
  (setq ac-quick-help-delay 0.2)
  )
;; <<< E N D auto-complete configuration

;; >>> START company
(when (package-installed-p 'company)
  (add-hook 'after-init-hook 'global-company-mode)
  )
;; <<< E N D company

;; >>> START mmm-mode
(when (package-installed-p 'mmm-mode)
  (require 'mmm-auto)
  (setq mmm-global-mode 'maybe)
  (add-to-list 'auto-mode-alist '("\\.nw" . latex-mode))
  (mmm-add-mode-ext-class nil "\\.nw\\'" 'noweb)
  ; add this line for region mode
  ; % -*- mmm-noweb-code-mode : c-mode; -*-
  )
;; <<< E N D mmm-mode

;; >>> START polymode
(when (package-installed-p 'polymode)
  (global-font-lock-mode t)
  (require 'polymode)
  (require 'poly-noweb)
  (defcustom pm-inner/noweb+C
    (clone pm-inner/noweb :mode 'c-mode)
    "Noweb innermode for C"
    :group 'innermodes
    :type 'object)
  (defcustom pm-poly/noweb+C
    (clone pm-poly/noweb :innermode 'pm-inner/noweb+C)
    "Noweb polymode for C"
    :group 'polymodes
    :type 'object)
  (define-polymode poly-noweb+C-mode pm-poly/noweb+C)
  (add-to-list 'auto-mode-alist '("\\.Cnw" . poly-noweb+C-mode))
  (when (package-installed-p 'rainbow-delimiters)
    (add-hook 'poly-noweb+C-mode-hook 'rainbow-delimiters-mode)
    )
  )
;; <<< E N D poly mode

;; >>> START java (eclim)
(when (package-installed-p 'emacs-eclim)
  (require 'eclim)
  (global-eclim-mode)
  ;; control eclimd from emacs
  (require 'eclimd)
  ;; eclipse path
  (custom-set-variables
   '(eclim-eclipse-dirs '("/Volumes/DATA/Eclipse.app/Contents/Eclipse/"))
   '(eclim-executable "/Volumes/DATA/Eclipse.app/Contents/Eclipse/eclim"))
  ;; display local help at error points
  (setq help-at-pt-display-when-idle t)
  (setq help-at-pt-timer-delay 0.1)
  (help-at-pt-set-timer)
  ;; configure auto-complete
  (when (package-installed-p 'auto-complete)
    ;; add the emacs-eclim source
    (require 'ac-emacs-eclim-source)
    (ac-emacs-eclim-config)
    )
  )
;; <<< E N D java (eclim)

;; >>> START clojure development
(when (package-installed-p 'paredit)
  ;; paredit
  (add-hook 'clojure-mode-hook 'paredit-mode)
  (add-hook 'cider-repl-mode-hook 'paredit-mode)
)
(show-paren-mode 1)
(when (package-installed-p 'ac-cider)
  ;; cider auto-complete
  (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
  (require 'ac-cider)
  (add-hook 'cider-mode-hook 'ac-flyspell-workaround)
  (add-hook 'cider-mode-hook 'ac-cider-setup)
  (add-hook 'cider-repl-mode-hook 'ac-cider-setup)
  (eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'cider-mode))
  (defun set-auto-complete-as-completion-at-point-function ()
    (setq completion-at-point-functions '(auto-complete)))
  (add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)
  (add-hook 'cider-mode-hook 'set-auto-complete-as-completion-at-point-function)
  )
(when (package-installed-p 'ac-nrepl)
  ;; nrepl auto-complete
  (require 'ac-nrepl)
  (add-hook 'cider-repl-mode-hook 'ac-nrepl-setup)
  (add-hook 'cider-mode-hook 'ac-nrepl-setup)
  (eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'cider-repl-mode))
  (add-hook 'cider-repl-mode-hook 'set-auto-complete-as-completion-at-point-function)
)
;; <<< E N D clojure development

;; >>> START multiple cursor
(when (package-installed-p 'multiple-cursors)
  ;; multiple cursor
  (require 'multiple-cursors)
  (global-set-key (kbd "C-c m ,") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c m .") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c m 8") 'mc/mark-all-like-this)
)
;; <<< E N D multiple cursor

;; >>> START projectile
(when (package-installed-p 'projectile)
  ;; enable projectile
  (projectile-global-mode)
  (setq projectile-enable-caching t)
)
;; <<< E N D projectile

;; >>> START cc-mode
(when (package-installed-p 'cc-mode)
  ;; tempo setup
  (require 'tempo)
  (setq tempo-interactive t)
  (defvar java-tempo-tags nil
    "Tempo tags for java mode")
  (defvar c-tempo-tags nil
    "Tempo tags for C mode")
  (when (package-installed-p 'ggtags)
    ; get emacs to find global external program
    (setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
    (setq exec-path (append exec-path '("/usr/local/bin")))
    (add-hook 'c-mode-hook
              (lambda ()
                (ggtags-mode 1)
                (tempo-use-tag-list 'c-tempo-tags)))
    (add-hook 'c++-mode-hook
              (lambda ()
                (ggtags-mode 1)))
    (add-hook 'java-mode-hook
              (lambda ()
                (ggtags-mode 1)
                (tempo-use-tag-list 'java-tempo-tags)))
    )
  ;; the following macros allow to set point using the ~ character in tempo templates
  (defvar tempo-initial-pos nil
    "Initial position in template after expansion")
  (defadvice tempo-insert( around tempo-insert-pos act )
    "Define initial position."
    (if (eq element '~)
        (setq tempo-initial-pos (point-marker))
      ad-do-it))
  (defadvice tempo-insert-template( around tempo-insert-template-pos act )
    "Set initial position when defined. ChristophConrad"
    (setq tempo-initial-pos nil)
    ad-do-it
    (if tempo-initial-pos
        (progn
          (put template 'no-self-insert t)
          (goto-char tempo-initial-pos))
      (put template 'no-self-insert nil)))
  ;; java templates
  (tempo-define-template "java-package"
                         '("package "
                           (when (string-match "/src/main/java/" default-directory)
                             (replace-regexp-in-string "/" "."
                                                       (substring default-directory
                                                                  (+ (string-match "/src/main/java/" default-directory) 15)
                                                                  (- (length default-directory) 1)))
                             )
                           ";" > n)
                         "package"
                         "Declare package at the beginning of java source file"
                         'java-tempo-tags)
  (tempo-define-template "java-import"
                         '("import " >  (p "Import: ") ";" n)
                         "import"
                         "Declare imports"
                         'java-tempo-tags)
  (tempo-define-template "java-class"
                         '("public class " > (substring (buffer-name) 0 (- (length (buffer-name)) 5)) > n " {" > n > r ~ > n "}" > n )
                         "class"
                         "Declare a class"
                         'java-tempo-tags)
  (tempo-define-template "java-interface"
                         '("public interface " > (substring (buffer-name) 0 (- (length (buffer-name)) 5)) > n " {" > n > r ~ > n "}" > n )
                         "interface"
                         "Declare an interface"
                         'java-tempo-tags)
  (tempo-define-template "java-attr"
                       '("private " (p "Type: " type) " " (p "Name: " var) ";" > n n
                         "public " > (s type) " get" (upcase-initials (tempo-lookup-named 'var))
                         "() {" > n
                         "return this." (s var)  ";" > n "}" > n n
                         "public void set" (upcase-initials (tempo-lookup-named 'var))
                         "(final " (s type) " " (s var) ") {" > n
                         "this." (s var) " = " (s var) ";" > n "}" > n)
                         "attribute"
                         "Declare attribute with getter, setter"
                         'java-tempo-tags)
  ; TODOS: osgi templates
  ;; c templates
  (tempo-define-template "c-include"
                         '("#include <" r ".h>" > n
                           )
                         "include"
                         "Insert a #include <> statement"
                         'c-tempo-tags)

  (tempo-define-template "c-define"
                         '("#define " r " " > n
                           )
                         "define"
                         "Insert a #define statement"
                         'c-tempo-tags)

  (tempo-define-template "c-ifdef"
                         '("#ifdef " (p "ifdef-condition: " clause) > n> p n
                           "#else /* !(" (s clause) ") */" n> p n
                           "#endif // " (s clause) n>
                           )
                         "ifdef"
                         "Insert a #ifdef #else #endif statement"
                         'c-tempo-tags)

  (tempo-define-template "c-ifndef"
                         '("#ifndef " (p "ifndef-clause: " clause) > n 
                           "#define " (s clause) n> p n
                           "#endif // " (s clause) n>
                           )
                         "ifndef"
                         "Insert a #ifndef #define #endif statement"
                         'c-tempo-tags)
  (tempo-define-template "c-if"
                         '(> "if (" ~ " ) { "  n>
                             > n
                             "}" > n> 
                             )
                         "if"
                         "Insert a C if statement"
                         'c-tempo-tags)

  (tempo-define-template "c-else"
                         '(> "else {" n>
                             > ~ n 
                             "}" > n>
                             )
                         "else"
                         "Insert a C else statement"
                         'c-tempo-tags)
  (tempo-define-template "c-while"
                         '(> "while (" ~ " ) { "  n>
                             > n
                             "}" > n>      
                             )
                         "while"
                         "Insert a C while statement"
                         'c-tempo-tags)

  (tempo-define-template "c-for"
                         '(> "for (" ~ " ) { "  n>
                             > n
                             "}" > n>      
                             )
                         "for"
                         "Insert a C for statement"
                         'c-tempo-tags)
  (tempo-define-template "c-main"
                         '(> "int main(int argc, char *argv[]) {" >  n> 
                             > r n
                             "return 0;" > n
                             "}" > n>
                             )
                         "main"
                         "Insert a C main statement"
                         'c-tempo-tags)

  (tempo-define-template "c-switch"
                         '(> "switch(" (p "variable to check: " clause) ") {" >  n>  
                             "case " > (p "first value: ") ": " ~ > n>
                             " break;" > n>
                             >"default:" > n>
                             "}" > n>
                             )
                         "switch"
                         "Insert a C switch statement"
                         'c-tempo-tags)
  ;; TODO: function template
  )
;; <<< E N D cc-mode

;; >>> START llvm
(when (package-installed-p 'llvm-mode)
  (add-to-list 'auto-mode-alist '("\\.ll" . llvm-mode))
  )
;; <<< E N D llvm

;; >>> START scala development
(when (package-installed-p 'ensime)
  (setq exec-path (append exec-path '("/usr/local/bin")))
  ;; scala ensime hook
  (require 'ensime)
  (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
)
;; <<< E N D scala development

;; >>> START recent file
(when (package-installed-p 'recentf)
  ;; recentf
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
)
;; <<< E N D recent file

;; >>> START powerline
(when (package-installed-p 'powerline)
  ;; powerline
  (require 'powerline)
  (powerline-center-theme)
  (if (display-graphic-p)
    ;; use wave instead of arrow
    (custom-set-variables '(powerline-default-separator 'contour))
    (custom-set-variables
     '(powerline-utf-8-separator-left #x003E)
     '(powerline-utf-8-separator-right #x003C)))
  (setq powerline-default-separator-dir '(left . right))
)
;; <<< E N D powerline

;; >>> START relative line number
(when (package-installed-p 'relative-line-numbers)
  ;; enable relative line number
  (global-relative-line-numbers-mode)
)
;; <<< E N D relative line number

;; >>> START speedbar
(when (package-installed-p 'sr-speedbar)
  (require 'sr-speedbar)
  (setq sr-speedbar-auto-refresh nil)
  (setq speedbar-show-unknown-files t) ; show all files
  (setq speedbar-use-images nil) ; use text for buttons
  (setq sr-speedbar-right-side t) ; put on left side
  )
;; <<< E N D speedbar

;; >>> START evil
(when (package-installed-p 'evil)
  ;; evil mode by default
  (require 'evil)
  (evil-mode 1)
  ;; set cursor color
  (setq evil-emacs-state-cursor '("#98AFC7" box)) ; blue gray
  (setq evil-normal-state-cursor '("#6AFB92" box)) ; dragon green
  (setq evil-visual-state-cursor '("#659EC7" box)) ; blue koi
  (setq evil-insert-state-cursor '("#FFE87C" bar)) ; sun yellow
  (setq evil-replace-state-cursor '("#FFE87C" bar))
  (setq evil-operator-state-cursor '("#FFE87C" hollow))
  ;; ESC key fix
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  ;; define keys
  (define-key evil-normal-state-map "ff" 'find-file) ;; file find
  (when (package-installed-p 'recentf)
    (define-key evil-normal-state-map "fr" 'recentf-open-files) ;; file recent
    )
  ; removed : various key map
  ;; evil-leader settings
  (when (package-installed-p 'evil-leader)
    (setq evil-leader/in-all-states 1)
    (global-evil-leader-mode t)
    ;; set leader to space
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
     "f" 'find-file
     "q" 'save-buffers-kill-terminal)
    ; removed : various leader map
    (defun sys-open-current-buffer()
      "Open current buffer using system default application"
      (interactive)
      (when (buffer-modified-p)
        (when (y-or-n-p "Buffer is modified, Save?")
          (save-buffer)))
      (shell-command (concat "open " (buffer-file-name))))
    (evil-leader/set-key
     "xx" 'sys-open-current-buffer)
    )
)
;; <<< E N D evil

;; >>> START keys define
(when (package-installed-p 'hydra)
  (require 'hydra)
  (global-set-key (kbd ";") nil) ;; disable default key
  (global-set-key (kbd "; ;") (lambda () (interactive) (insert ";") (message ";;=; ;RET=;\\n"))) ;; a slow way to insert
  (global-set-key (kbd "; RET") (lambda () (interactive) (insert ";\n"))) ;;
  (global-set-key (kbd "; ?") (lambda () (interactive) (message "bb=switch buffer rr=recent files ")))
  ;; File open/close
  (global-set-key (kbd "; f ?") (lambda () (interactive) (message "ff=find file fq=file quit fs=file save fk=file kill fl=explore open fh=explore close")))
  (global-set-key (kbd "; f f") 'find-file) ;; file find
  (global-set-key (kbd "; f q") 'save-buffers-kill-terminal) ;; file quit
  (global-set-key (kbd "; f s") 'save-buffer) ;; file save
  (global-set-key (kbd "; f k") 'kill-buffer) ;; file quit
  ;(global-unset-key (kbd "<f2> b")) ;; unbind associate buffer
  (global-set-key (kbd "; b b") 'switch-to-buffer) ;; file buffer _tka
  (when (package-installed-p 'recentf)
    (global-set-key (kbd "; r r") 'recentf-open-files) ;; file recent _tka
    )
  (when (package-installed-p 'sr-speedbar)
    (global-set-key (kbd "; f l") 'sr-speedbar-open) ;; file buffer
    (global-set-key (kbd "; f h") 'sr-speedbar-close) ;; file buffer
    )
  ;; getting help
  (global-set-key (kbd "; h k") 'describe-key)
  (global-set-key (kbd "; h f") 'describe-function)
  ;; moving point
  (global-set-key (kbd "; l l") 'move-end-of-line)
  (global-set-key (kbd "; h h") 'move-beginning-of-line)
  (when (package-installed-p 'smartparens)
    (add-hook 'prog-mode-hook (lambda () (interactive)
                                (local-set-key (kbd "<f2> j j") 'sp-end-of-sexp)
                                (local-set-key (kbd "<f2> k k") 'sp-beginning-of-sexp)
                                (local-set-key (kbd "<f2> DEL") 'sp-unwrap-sexp)
                                ))
    )
  (defhydra hydra-move ()
    ("l" (lambda (delta) (interactive "p") (move-to-column (+ (current-column) delta))) "right")
    ("h" (lambda (delta) (interactive "p") (move-to-column (max 0 (- (current-column) delta)))) "left")
    ("j" (lambda (delta) (interactive "p") (next-line delta)) "down")
    ("k" (lambda (delta) (interactive "p") (previous-line delta)) "up")
    ("o" move-end-of-line "end")
    ("y" move-beginning-of-line "home")
    ("u" end-of-buffer "buffer end")
    ("i" beginning-of-buffer "buffer begin"))
  (global-set-key (kbd "<f5> m") 'hydra-move/body)
  (defhydra hydra-resize-window ()
    ("h" shrink-window-horizontally "shrink left")
    ("l" enlarge-window-horizontally "enlarge right")
    ("k" shrink-window "shrink up")
    ("j" enlarge-window "enlarge down")
    ("o" other-window "to other"))
  (global-set-key (kbd "<f5> w") 'hydra-resize-window/body)
  ;; editing
  (global-set-key (kbd "; m m") 'set-mark-command) ;; _tka
  (global-set-key (kbd "; x x") 'kill-region) ;; _tka
  (global-set-key (kbd "; c c") 'kill-ring-save) ;; _tka
  (global-set-key (kbd "; p p") 'yank) ;; _tka
  (when (package-installed-p 'undo-tree)
    (global-undo-tree-mode)
    (global-set-key (kbd "; u v") 'undo-tree-visualize))
  (global-set-key (kbd "; u u") 'undo) ;; _tka
  (global-set-key (kbd "; d d") 'kill-whole-line) ;; _tka
  (global-set-key (kbd "; t") 'tempo-complete-tag)
  ;; rectangle
  (global-set-key (kbd "; r c") 'copy-rectangle-as-kill) ;; rec copy _tka
  (global-set-key (kbd "; r x") 'kill-rectangle) ;; rec cut _tka
  (global-set-key (kbd "; r p") 'yank-rectangle) ;; rec paste
  (global-set-key (kbd "; r d") 'delete-rectangle) ;; rec delete
  (add-hook
   'picture-mode-hook
   (lambda ()
     (define-key picture-mode-map (kbd "; r o") 'picture-clear-rectangle) ;; rec out
     (define-key picture-mode-map (kbd "; r i") 'picture-yank-rectangle) ;; rec insert
     ))
  ;; window
  (global-set-key (kbd "; w h") 'delete-window) ;; window close _tka
  (global-set-key (kbd "; w l") 'split-window-right) ;; window ->
  (global-set-key (kbd "; w j") 'split-window-below) ;; window _|_
  (global-set-key (kbd "; w o") 'other-window) ;; window other
  ;; search
  ;(global-unset-key (kbd "<f2> s"))
  ;(global-set-key (kbd "; s j") 'isearch-forward) ;; search _|_
  ;(global-set-key (kbd "; s k") 'isearch-backward) ;; search ^
  (global-set-key (kbd "; /") 'isearch-forward) ;; search _|_
  (global-set-key (kbd "; \\") 'isearch-backward) ;; search ^
  ;(add-hook 'isearch-mode-hook
  ;          (lambda ()
  ;            (define-key isearch-mode-map (kbd "; j") 'isearch-repeat-forward)
  ;            (define-key isearch-mode-map (kbd "; k") 'isearch-repeat-backward)
  ;            ))
  (global-set-key (kbd "; s r") 're-builder) ;; search regex
  ;; execute commands
  ; use build-in ESC-x to execute commands
  (global-set-key (kbd "; z z") 'execute-extended-command)
  (global-set-key (kbd "; x c") 'compile)
  (global-set-key (kbd "; x e") 'eval-last-sexp)
  (global-set-key (kbd "; g") 'keyboard-escape-quit)
  ;; my use of note
  (when (fboundp 'mode-line-note-set)
    (global-set-key (kbd "; n s") 'mode-line-note-set)
    (global-set-key (kbd "; n x") 'mode-line-note-off)
    )
  ;; org mode
  (when (package-installed-p 'org)
    (require 'org)
    (define-key org-mode-map (kbd "; o c") 'org-ctrl-c-ctrl-c) ;; org check
    (define-key org-mode-map (kbd "; o t") 'org-todo) ;; org todo
    (define-key org-mode-map (kbd "; o r") 'org-meta-return) ;; org return
    (define-key org-mode-map (kbd "; o a") 'org-agenda) ;; org agenda
    )
  (when (package-installed-p 'imenu)
    (define-key org-mode-map (kbd "; i g") 'ido-goto-symbol) ;; org goto
    )
  (when (package-installed-p 'deft)
    (global-set-key (kbd "; n v") 'deft) ;; notational velocity
    )
  ;; projectile
  (when (package-installed-p 'projectile)
    (define-key projectile-mode-map (kbd "; p f") 'projectile-find-file) ;; project file
    (define-key projectile-mode-map (kbd "; p g") 'projectile-find-file-dwim)
    (define-key projectile-mode-map (kbd "; p b") 'projectile-switch-to-buffer)
    (define-key projectile-mode-map (kbd "; p r") 'projectile-recentf) ;; project recent
    )
  ;; ggtags
  (when (package-installed-p 'ggtags)
    (add-hook 'ggtags-mode-hook
          (lambda ()
            (local-set-key (kbd "; p t f") 'ggtags-find-file)
            (local-set-key (kbd "; p t r") 'ggtags-find-reference)
            (local-set-key (kbd "; p t d") 'ggtags-find-definition)
            (local-set-key (kbd "; p t t") 'ggtags-find-tag-dwim)
            ))
    )
  ;; dictionary
  (when (package-installed-p 'synosaurus)
    (global-set-key (kbd "; d l") 'synosaurus-lookup)
    (global-set-key (kbd "; d r") 'synosaurus-choose-and-replace)
    )
  )

;; <<< E N D keys define 

;; >>> START helm
(when (package-installed-p 'helm)
  (require 'helm)
  (require 'helm-config)
  ; change helm header font
  (custom-set-faces
   '(helm-source-header ((t (:background "#22083397778B"
                                         :foreground "white"
                                         :weight bold
                                         :height 1.0
                                         :family mono-font-face)))))
  ; change helm prefix
  (global-set-key (kbd "; h x") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  ; change some config
  (setq helm-split-window-in-side-p            t
        helm-split-window-default-side         'other
        helm-move-to-line-cycle-in-source      t
        helm-ff-search-library-in-sexp         t
        helm-scroll-amount                     8
        helm-ff-file-name-history-use-recentf  t
        helm-M-x-fuzzy-match                   t
        helm-buffers-fuzzy-matching            t
        helm-recentf-fuzzy-match               t)
  ; start helm
  (helm-mode 1)
  (helm-autoresize-mode t)
  ; bind keys
  (global-set-key (kbd "; z z") 'helm-M-x)
  (global-set-key (kbd "; k r") 'helm-show-kill-ring)
  (global-set-key (kbd "; f f") 'helm-find-files)
  (global-set-key (kbd "; r r") 'helm-mini)
  (when (package-installed-p 'helm-swoop)
    (global-set-key (kbd "; /") 'helm-swoop)
    )
  (when (package-installed-p 'helm-projectile)
    (define-key projectile-mode-map (kbd "; p f") 'helm-projectile) ;; project file
    (define-key projectile-mode-map (kbd "; p g") 'helm-projectile-grep)
    (define-key projectile-mode-map (kbd "; p b") 'helm-projectile-switch-to-buffer)
    (define-key projectile-mode-map (kbd "; p r") 'helm-projectile-recentf) ;; project recent
    (when (package-installed-p 'helm-ag)
      (define-key projectile-mode-map (kbd "; p g") 'helm-do-ag-project-root)
      )
    )
  )
;; <<< E N D helm

;; >>> START key-chord
(when (package-installed-p 'key-chord)
  (require 'key-chord)
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.3)
  ;; define keychord, but in one way fashion
  (defun key-chord-define-oneway (keymap keys command)
  "Define in KEYMAP, a key-chord of two keys in KEYS starting a COMMAND.
\nKEYS can be a string or a vector of two elements. Currently only elements
that corresponds to ascii codes in the range 32 to 126 can be used.
\nCOMMAND can be an interactive function, a string, or nil.
If COMMAND is nil, the key-chord is removed."
  (if (/= 2 (length keys))
      (error "Key-chord keys must have two elements"))
  ;; Exotic chars in a string are >255 but define-key wants 128..255 for those
  (let ((key1 (logand 255 (aref keys 0)))
	(key2 (logand 255 (aref keys 1))))
    (if (eq key1 key2)
	(define-key keymap (vector 'key-chord key1 key2) command)
      ;; else
      (define-key keymap (vector 'key-chord key1 key2) command))))
  ;; global define
  (defun key-chord-define-oneway-global (keys command)
  "Define a key-chord of two keys in KEYS starting a COMMAND.
\nKEYS can be a string or a vector of two elements. Currently only elements
that corresponds to ascii codes in the range 32 to 126 can be used.
\nCOMMAND can be an interactive function, a string, or nil.
If COMMAND is nil, the key-chord is removed."
  (interactive "sSet key chord globally (2 keys): \nCSet chord \"%s\" to command: ")
  (key-chord-define-oneway (current-global-map) keys command))
  ;; The global command mode
  (setq use-chord-command nil)
  (defun chord-command-on ()
    (interactive)
    (setq use-chord-command t)
    (when (display-graphic-p)
      (setq-default cursor-type 'box)
      (set-cursor-color "#ECB028")
      (blink-cursor-mode 0)))
  (defun chord-command-off ()
    (interactive)
    (setq use-chord-command nil)
    (when (display-graphic-p)
      (setq-default cursor-type 'hollow)
      (set-cursor-color "#6AFB92")
      (blink-cursor-mode 0)))
  ;; Set global flag on/off
  (key-chord-define-oneway-global "fj" 'chord-command-on) ;; down-up
  (key-chord-define-oneway-global "jf" 'chord-command-off) ;; up-down
  ;; File open/close
  (key-chord-define-oneway-global "ff" (lambda () (interactive) (if use-chord-command (call-interactively 'find-file) (insert "ff")))) ;; file find
  (key-chord-define-oneway-global "fq" (lambda () (interactive) (if use-chord-command (call-interactively 'save-buffers-kill-terminal) (insert "fq")))) ;; file quit
  (when (package-installed-p 'recentf)
    (key-chord-define-oneway-global "rr" (lambda () (interactive) (if use-chord-command (call-interactively 'recentf-open-files) (insert "rr")))) ;; file recent _tka
    )
  ; removed : various similar keychord-'mode' key map
  (when nil
    ;; File open/close
    (key-chord-define-oneway-global "FF" 'find-file) ;; file find
    (key-chord-define-oneway-global "FQ" 'save-buffers-kill-terminal) ;; file quit
    (when (package-installed-p 'recentf)
      (key-chord-define-oneway-global "FR" 'recentf-open-files) ;; file recent
      )
    ; removed : various keychord caplock binding
    )
  )
;; <<< E N D key-chord

;; >>> START generic modes
(when nil
  (require 'generic-x)
  (define-generic-mode 'quan-journal-mode
    '() ;; comment start list
    '() ;; preserved key words list
    '(("\\(^>[^<]*<$\\)" . 'font-lock-comment-face)
      ("\\(==.*=\\)" . 'font-lock-constant-face)
      ("\\(\*.*\*\\)" . 'font-lock-variable-name-face)
      ("\\(vim:.*\\)" . 'font-lock-comment-face)
      ("\\(^>$\\)" . 'font-lock-comment-face)
      ("\\(^   .*\\)" . 'font-lock-comment-face)
      ("\\(^<$\\)" . 'font-lock-comment-face)) ;; customized render
    '("journal.*$")
    nil
    "A mode for writting my journal in emacs, originally in vm help format"
  ))
;; <<< E N D generic modes

;; >>> START org
(when (package-installed-p 'org)
  ;; org mode work flow
  (setq org-todo-keywords 
        '((sequence "TODO(1!)" "DOING(2!)" "BLOCKED(3@/!)" "REVIEW(4)" "|" "DONE(5!)" "ARCHIVED(6@)")
          (sequence "NEW(A!)" "FAIL(I!)" "ASSIGNED(B@/!)" "ONGOING(C!)" "CONFIRM(D@)" "BUILDREADY(E!)" "VERIFYREADY(F!)" "|" "PASSED(G!)" "DEFFER(H!)")))
  (setq org-todo-keyword-faces
        '(("TODO" . "#FFE87C")
          ("DOING" . "#6AFB92")
          ("BLOCKED" . "red")
          ("REVIEW" . "#659EC7")
          ("DONE" . "#98AFC7")
          ("ARCHIVED" .  "gray")
          ("NEW" . "red")
          ("FAIL" . "red")
          ("ASSIGNED" . "green")
          ("ONGOING" . "green")
          ("CONFIRM" . "red")
          ("BUILDREADY" . "blue")
          ("VERIFYREADY" . "blue")
          ("PASSED" . "gray")
          ("DEFFER" . "gray")))
  (setq org-agenda-files (quote ("~/org")))
  )
;; enable babel languages
(when (package-installed-p 'babel)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sql . t) (java . t) (C . t) (emacs-lisp . t)))
  (setq org-src-fontify-natively t)
  )
;; integrate deft with org
(when (package-installed-p 'deft)
                                        ;(setq deft-extension nil)
  (setq deft-extensions '("org" "md"))
  (setq deft-directory "~/org/deft/")
  (setq deft-text-mode 'org-mode)
                                        ;(setq deft-use-filename-as-title t)
                                        ;(global-set-key (kbd "<f9>") 'deft))
  (require 'deft)
  )
(when (package-installed-p 'imenu)
  ; by huylnq : goto symbols using imenu
  (defun ido-goto-symbol (&optional symbol-list)
    "Refresh imenu and jump to a place in the buffer using Ido."
    (interactive)
    (unless (featurep 'imenu)
      (require 'imenu nil t))
    (cond
     ((not symbol-list)
      (let ((ido-mode ido-mode)
            (ido-enable-flex-matching
             (if (boundp 'ido-enable-flex-matching)
                 ido-enable-flex-matching t))
            name-and-pos symbol-names position)
        (unless ido-mode
          (ido-mode 1)
          (setq ido-enable-flex-matching t))
        (while (progn
                 (imenu--cleanup)
                 (setq imenu--index-alist nil)
                 (ido-goto-symbol (imenu--make-index-alist))
                 (setq selected-symbol
                       (ido-completing-read "Symbol? " symbol-names))
                 (string= (car imenu--rescan-item) selected-symbol)))
        (unless (and (boundp 'mark-active) mark-active)
          (push-mark nil t nil))
        (setq position (cdr (assoc selected-symbol name-and-pos)))
        (cond
         ((overlayp position)
          (goto-char (overlay-start position)))
         (t
          (goto-char position)))))
     ((listp symbol-list)
      (dolist (symbol symbol-list)
        (let (name position)
          (cond
           ((and (listp symbol) (imenu--subalist-p symbol))
            (ido-goto-symbol symbol))
           ((listp symbol)
            (setq name (car symbol))
            (setq position (cdr symbol)))
           ((stringp symbol)
            (setq name symbol)
            (setq position
                  (get-text-property 1 'org-imenu-marker symbol))))
          (unless (or (null position) (null name)
                      (string= (car imenu--rescan-item) name))
            (add-to-list 'symbol-names name)
            (add-to-list 'name-and-pos (cons name position))))))))
)
;; <<< E N D org

;; >>> START functions for emacs shells
(when nil
  ;; set $PATH for shells
  (when (display-graphic-p)
    (let '(path "/Users/sstvn/Dev/Applications/groovy-2.1.9/bin:/Users/sstvn/springsource/spring-roo-1.2.4.RELEASE/bin:/Users/sstvn/Dev/Applications/mongodb-osx-x86_64-2.4.8/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/Users/sstvn/Dev/Applications/vert.x-2.0.2-final/bin:/Users/sstvn/Dev/Applications/apache-maven-3.1.1/bin:/usr/local/mysql/bin:/Users/sstvn/Dev/ShellScript:/Users/sstvn/clojure:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home:/Users/sstvn/scala-2.11.4/bin")
      (setenv "PATH" path)
      (setq exec-path
            (append
             (split-string-and-unquote path ":")
             exec-path)))
    (setenv "JAVA_HOME" "/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home")
    )
  ;; shells with different buffer names
  (defun bash (buffer-name)
    "Start a terminal and rename buffer."
    (interactive "sbuffer name: ")
    (term "/bin/bash")
    (rename-buffer buffer-name t))
  (defun zsh (buffer-name)
    "Start a terminal and rename buffer."
    (interactive "sbuffer name: ")
    (term "/bin/zsh")
    (rename-buffer buffer-name t))
  (defun fish (buffer-name)
    "Start a terminal with BUFFER-NAME."
    (interactive "sbuffer name:")
    (term "/usr/local/bin/fish")
    (rename-buffer buffer-name t))
  )
;; <<< E N D functions for emacs shells

;; <<<<<<< E N D re-organizing configuration

;; startup files
;(find-file "~/tryorg.org")
;(find-file "~/emacs-cheat-sheet.org")
;(find-file "~/vms-maven/.projectile")

;;; .emacs ends here
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values
   (quote
    ((mmm-noweb-code-mode . haskell-mode)
     (mmm-noweb-code-mode . c-mode)))))

