;; >>>>>>> START re-organizing configuration

;; >>> START global interface fix
;; fix key M S C in mac
(set-keyboard-coding-system nil)
;; do not show help
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
;; monospace font for better drawing
(when (display-graphic-p)
  (add-to-list 'default-frame-alist
               '(font . "Source Code Pro-12"))
  (set-face-attribute 'default nil
                      :family "Source Code Pro" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "Source Code Pro-12")
  (set-face-attribute 'variable-pitch nil :font "Source Code Pro-12")
  )
(when (display-graphic-p)
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-level-1 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-2 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-3 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-4 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-5 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-document-title ((((class color) (min-colors 89)) (:inherit variable-pitch :foreground "#DC143C" :height 1.0)))))
)
;; disable all dialog
(defadvice yes-or-no-p (around prevent-dialog activate)
  "Prevent yes-or-no-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice y-or-n-p (around prevent-dialog-yorn activate)
  "Prevent y-or-n-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice message-box (around prevent-dialog activate)
  "Prevent message-box from activating a dialog"
  (apply #'message (ad-get-args 0)))
;; disable scrollbar
(when (display-graphic-p)
  (scroll-bar-mode -1)
)
(setq mouse-wheel-progressive-speed nil)
;; kill toolbar too
(menu-bar-mode -1)
(when (display-graphic-p)
  (tool-bar-mode -1)
)
;; RET auto-indent
;(define-key global-map (kbd "RET") 'newline-and-indent)
;; spaces for tabs
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default indent-line-function 'insert-tab)
;;(setq-default tab-stop-list (number-sequence 2 200 2))
;; enable navigate with arrows
(defun disable-guru-mode ()
  (guru-mode -1))
(add-hook 'prelude-prog-mode-hook 'disable-guru-mode t)
;;(setq visible-bell t)
;;(setq visible-bell 'top-bottom)
(setq ring-bell-function 'ignore)
;; icicle
;(icomplete-mode 99)
;; line display
(line-number-mode t)
(column-number-mode t)
(global-hl-line-mode -1)
(setq-default truncate-lines t)
;; disable auto-save
(setq auto-save-default nil)
;; IDO every where
;(setq ido-enable-flex-matching t)
;(setq ido-everywhere t)
;(ido-mode 1)
;; fancier mode-line
(when t
  ;; Mode line setup
  (setq-default
   mode-line-format
   '(; Clock
     (:eval (propertize (format-time-string "%H:%M")
              'help-echo
              (concat (format-time-string "%c; ")
                      (emacs-uptime "Uptime:%hh"))
              'face 'mode-line-clock-face))
     ; Position, including warning for 80 columns
     (:propertize "%4l:" face mode-line-position-face)
     (:eval (propertize "%3c" 'face
                        (if (>= (current-column) 80)
                            'mode-line-80col-face
                          'mode-line-position-face)))
     ;emacsclient [default -- keep?]
     mode-line-client
     " "
     ; read-only or modified status
     (:eval
      (cond (buffer-read-only
             (propertize "RO" 'face 'mode-line-read-only-face))
            ((buffer-modified-p)
             (propertize "**" 'face 'mode-line-modified-face))
            (t "  ")))
     " "
     ; directory and buffer/file name
     ;(:propertize (:eval (shorten-directory default-directory 30))
     ;             face mode-line-folder-face)
     (:propertize (:eval (abbrev-directory default-directory))
             face mode-line-folder-face)
     (:propertize "%b"
                  face mode-line-filename-face)
     ; narrow [default -- keep?]
     " %n "
     ; mode indicators: vc, recursive edit, major mode, minor modes, process, global
     (vc-mode vc-mode)
     "  %["
     (:propertize mode-name
                  face mode-line-mode-face)
     "%] "
     (:eval (propertize (format-mode-line minor-mode-alist)
                        'face 'mode-line-minor-mode-face))
     (:propertize mode-line-process
                  face mode-line-process-face)
     (global-mode-string global-mode-string)
     " "
     (:propertize mode-line-note
                  face mode-line-note-face)
     mode-line-end-spaces
     ; nyan-mode uses nyan cat as an alternative to %p
     ;(:eval (when nyan-mode (list (nyan-create))))
     ))

  ;; Display a small note to indicate what I am to do
  (setq mode-line-note nil)
  (defun mode-line-note-off ()
    (interactive)
    (setq mode-line-note nil)
    (force-mode-line-update))
  (defun mode-line-note-set (note-text)
    (interactive "s::")
    (if mode-line-note
        (setq mode-line-note (concat note-text " < " mode-line-note))
      (setq mode-line-note note-text))
    (when (> (length mode-line-note) 52)
      (setq mode-line-note (substring mode-line-note 0 52))
      )
    (force-mode-line-update))
  ;; Helper function
  (defun shorten-directory (dir max-length)
    "Show up to `max-length' characters of a directory name `dir'."
    (let ((path (reverse (split-string (abbreviate-file-name dir) "/")))
          (output ""))
      (when (and path (equal "" (car path)))
        (setq path (cdr path)))
      (while (and path (< (length output) (- max-length 4)))
        (setq output (concat (car path) "/" output))
        (setq path (cdr path)))
      (when path
        (setq output (concat ".../" output)))
      output))
  (defun abbrev-directory (dir)
    "Show only 1 character for each parent dir"
    (mapconcat 'identity
               (mapcar (lambda (x)
                         (if (equal x "") x (substring x 0 1)))
                       (split-string (abbreviate-file-name dir) "/")) "/")
    )
  ;; Extra mode line faces
  (make-face 'mode-line-read-only-face)
  (make-face 'mode-line-modified-face)
  (make-face 'mode-line-folder-face)
  (make-face 'mode-line-filename-face)
  (make-face 'mode-line-position-face)
  (make-face 'mode-line-mode-face)
  (make-face 'mode-line-minor-mode-face)
  (make-face 'mode-line-process-face)
  (make-face 'mode-line-80col-face)
  (make-face 'mode-line-clock-face)
  (make-face 'mode-line-note-face)

  (set-face-attribute 'mode-line-clock-face nil
                      :inherit 'mode-line-face
                      :foreground "#659EC7"
                      :box '(:line-width 2 :color "#659EC7"))
  (set-face-attribute 'mode-line nil
                      :foreground "gray60" :background "gray20"
                      :inverse-video nil
                      :box '(:line-width 2 :color "gray20" :style nil))
  (set-face-attribute 'mode-line-inactive nil
                      :foreground "gray80" :background "gray40"
                      :inverse-video nil
                      :box '(:line-width 2 :color "gray40" :style nil))

  (set-face-attribute 'mode-line-read-only-face nil
                      :inherit 'mode-line-face
                      :foreground "#4271ae"
                      :box '(:line-width 2 :color "#4271ae"))
  (set-face-attribute 'mode-line-modified-face nil
                      :inherit 'mode-line-face
                      :foreground "#c82829"
                      :background "#ffffff"
                      :box '(:line-width 2 :color "#c82829"))
  (set-face-attribute 'mode-line-folder-face nil
                      :inherit 'mode-line-face
                      :foreground "gray60")
  (set-face-attribute 'mode-line-filename-face nil
                      :inherit 'mode-line-face
                      :foreground "#eab700"
                      :weight 'bold)
  (set-face-attribute 'mode-line-position-face nil
                      :inherit 'mode-line-face
                                        ;:family "Menlo" :height 100
                      )
  (set-face-attribute 'mode-line-mode-face nil
                      :inherit 'mode-line-face
                      :foreground "gray80")
  (set-face-attribute 'mode-line-minor-mode-face nil
                      :inherit 'mode-line-mode-face
                      :foreground "gray40"
                                        ;:height 110
                      )
  (set-face-attribute 'mode-line-process-face nil
                      :inherit 'mode-line-face
                      :foreground "#718c00")
  (set-face-attribute 'mode-line-80col-face nil
                      :inherit 'mode-line-position-face
                      :foreground "black" :background "#eab700")
  (set-face-attribute 'mode-line-note-face nil
                      :inherit 'mode-line-face
                      :foreground "#DC143C" ; Crimson
                                        ;:box '(:line-width 2 :color "#4271ae")
                      )
  )
;; view large files instead of editing it 
(defun my-find-file-check-make-large-file-read-only-hook ()
  "If a file is over a given size, make the buffer read only."
  (when (> (buffer-size) (* 1024 1024))
    (setq buffer-read-only t)
    (buffer-disable-undo)
    (fundamental-mode)))
(add-hook 'find-file-hooks 'my-find-file-check-make-large-file-read-only-hook)
;; <<< E N D global interface fix

;; >>> START package manager
;; melpa package repository
(require 'package)
;;(add-to-list 'package-archives
;;  '("melpa" . "http://melpa.milkbox.net/packages/") t)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("org" . "http://orgmode.org/elpa/")
                         ("sunrisec" . "http://joseito.republika.pl/sunrise-commander/")))
;; uncomment after cleaning up
;(package-refresh-contents)
(package-initialize)
;; themes
(unless (package-installed-p 'solarized-theme)
  (package-install 'solarized-theme))
(unless (package-installed-p 'zenburn-theme)
  (package-install 'zenburn-theme))
(unless (package-installed-p 'obsidian-theme)
  (package-install 'obsidian-theme))
(unless (package-installed-p 'inkpot-theme)
  (package-install 'inkpot-theme))
(unless (package-installed-p 'monokai-theme)
  (package-install 'monokai-theme))
(unless (package-installed-p 'ample-theme)
  (package-install 'ample-theme))
(unless (package-installed-p 'subatomic256-theme)
  (package-install 'subatomic256-theme))
(unless (package-installed-p 'badwolf-theme)
  (package-install 'badwolf-theme))
;; generic eye candies
(unless (package-installed-p 'rainbow-delimiters)
  (package-install 'rainbow-delimiters))
;(unless (package-installed-p 'auto-complete)
;  (package-install 'auto-complete))
; removed : evil, rainbow blocks
(unless (package-installed-p 'relative-line-numbers)
  (package-install 'relative-line-numbers))
; removed : clojure, scala
;; lua development
(unless (package-installed-p 'lua-mode)
  (package-install 'lua-mode))
;; C development
(unless (package-installed-p 'cc-mode)
  (package-install 'cc-mode))
;; Haskell development
(unless (package-installed-p 'haskell-mode)
  (package-install 'haskell-mode))
;; Web development
(unless (package-installed-p 'web-mode)
  (package-install 'web-mode))
(unless (package-installed-p 'web-beautify)
  (package-install 'web-beautify))
;; Org
(unless (package-installed-p 'org)
  (package-install 'org))
(unless (package-installed-p 'babel)
  (package-install 'babel))
(unless (package-installed-p 'deft)
  (package-install 'deft))
;; removed : Sunrise Commander
;; misc modes
(unless (package-installed-p 'json-mode)
  (package-install 'json-mode))
(unless (package-installed-p 'markdown-mode)
  (package-install 'markdown-mode))
(unless (package-installed-p 'projectile)
  (package-install 'projectile))
(unless (package-installed-p 'ggtags)
  (package-install 'ggtags))
(unless (package-installed-p 'fish-mode)
  (package-install 'fish-mode))
; removed : keychord
(unless (package-installed-p 'sr-speedbar)
  (package-install 'sr-speedbar))
;(unless (package-installed-p 'imenu)
;  (package-install 'imenu))
(unless (package-installed-p 'hydra)
  (package-install 'hydra))
(unless (package-installed-p 'undo-tree)
  (package-install 'undo-tree))
; removed : smartparens, eclim, company, polymode
(unless (package-installed-p 'mmm-mode)
  (package-install 'mmm-mode))
; change workflow to helm instead of ido
(unless (package-installed-p 'helm)
  (package-install 'helm))
(unless (package-installed-p 'helm-swoop)
  (package-install 'helm-swoop))
(unless (package-installed-p 'helm-projectile)
  (package-install 'helm-projectile))
;(unless (package-installed-p 'ac-helm)
;  (package-install 'ac-helm))
;; company mode instead of auto-complete
(unless (package-installed-p 'company)
  (package-install 'company))
;; RUST development
(unless (package-installed-p 'rust-mode)
  (package-install 'rust-mode))
;; compile installed packages
(byte-recompile-directory (expand-file-name "~/.emacs.d") 0)
;; <<< E N D package manager

;; >>> START themes
(when (and (package-installed-p 'monokai-theme) (package-installed-p 'subatomic256-theme))
  ;; theme setting
  (if (display-graphic-p)
      (load-theme 'badwolf t)
      (load-theme 'badwolf t)
    )
  )
;;cursor
(when (display-graphic-p)
  (setq-default cursor-type 'box) ;(setq-default cursor-type 'hollow)
  (set-cursor-color "#6AFB92")
  (blink-cursor-mode 0)
  )
;;transparency
(when (and (display-graphic-p) nil)
    (set-frame-parameter (selected-frame) 'alpha '(85 50))
)
;; <<< E N D themes

;; >>> START tengwar org-mode
(when (and nil (package-installed-p 'org))
  (custom-set-faces
   ;; set tengwar region between #+begin_verse and #+end_verse
   '(org-verse ((((class color) (min-colors 89)) (:inherit variable-pitch :foreground "#BCC6CC" :family "Tengwar Annatar" :height 1.7)))))
  (custom-set-variables
   '(org-fontify-quote-and-verse-blocks t))
  (quail-define-package
   "tengwar-e2002" "Tengwar" "TE" t
   "Quanna’s personal input method defining tengwar characters"
   nil t nil nil nil nil nil nil nil nil t)
  ; TODO: need alot of refinement
  (quail-define-rules
   ("a1" ?C) ; left most
   ("a2" ?D) ; second left
   ("a3" ?E) ; second right
   ("a4" ?#) ; right most
   ("b" ?w) ; b
   ("c" ?z) ; c
   ("d" ?2) ; d
   ("e" ?F) ; sounded e
   ("E" ?Ê) ; silence e
   ("f" ?e) ; f
   ("g" ?x) ; g
   ("h" ?9) ; h
   ("i" ?B) ; i
   ("j" ?f) ; j
   ("k" ?z) ; k=c
   ("l" ?j) ; l
   ("m" ?t) ; m
   ("n" ?5) ; n
   ("o" ?N) ; o
   ("p" ?q) ; p
   ("qu" ["zê"]) ; qu
   ("r" ?7) ; sounded r
   ("R" ?6) ; silence r
   ("s" ?8) ; main s
   ("S" ?i) ; alternate s
   ("t" ?1) ; t
   ("u1" ?M) ; variant 1
   ("u2" ?J) ; variant 2
   ("u3" ?&) ; variant 3
   ("v" ?r) ; v
   ("w" ?y) ; w
   ("x" ["z|"]) ; x
   ("y" ?n) ; cons y
   ("Y" ?Í) ; vowel y
   ("z" ?k) ; main z
   ("Z" ?,) ; alternate z
   ("." ?-) ; dot
   ("," ?=) ; comma
   ("th" ?3) ; th
   ("ch" ?c) ; ch
   ("sh" ?d) ; sh
   ("nt" ["1p"]) ; nt
   ("nd" ["2p"]) ; nd
   ("mp" ["qp"]) ; mp
   ("mb" ["wP"]) ; mb
   ("ie" ["BË"]) ; ie ?
   ("ee" ["~V"]) ; ee 
   ) 
  )
;; <<< E N D tengwar org-mode

;; >>> START smartparens
(when (package-installed-p 'smartparens)
  (require 'smartparens-config)
  (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
  )
;; <<< E N D smartparens

;; >>> START rainbow mode
(when (package-installed-p 'rainbow-delimiters)
  (require 'rainbow-delimiters)
  ;; rainbow delimiters
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  ;; true rainbow color for rainbow blocks
  (set-face-attribute 'rainbow-delimiters-mismatched-face nil
                      :foreground "#C0C0C0" :background "#8B0000")
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground "#E6E7E8" :background "#8B0000")
  (set-face-attribute 'rainbow-delimiters-depth-1-face nil
                      :foreground "#FF0033")
  (set-face-attribute 'rainbow-delimiters-depth-2-face nil
                      :foreground "#FF8C00")
  (set-face-attribute 'rainbow-delimiters-depth-3-face nil
                      :foreground "##FFD700")
  (set-face-attribute 'rainbow-delimiters-depth-4-face nil
                      :foreground "#90EE90")
  (set-face-attribute 'rainbow-delimiters-depth-5-face nil
                      :foreground "#000080")
  (set-face-attribute 'rainbow-delimiters-depth-6-face nil
                      :foreground "#800080")
  (set-face-attribute 'rainbow-delimiters-depth-7-face nil
                      :foreground "#DA70D6")
  (set-face-attribute 'rainbow-delimiters-depth-8-face nil
                      :foreground "#FF69B4")
  (set-face-attribute 'rainbow-delimiters-depth-9-face nil
                      :foreground "#A52A2A")
  )
;; rainbow blocks in org
(when (package-installed-p 'rainbow-blocks)
  (require 'rainbow-blocks)
  (add-hook 'org-mode-hook 'rainbow-blocks-mode)
  ;; true rainbow color for rainbow blocks
  (set-face-attribute 'rainbow-blocks-unmatched-face nil
                      :foreground "#8B0000")
  (set-face-attribute 'rainbow-blocks-depth-1-face nil
                      :foreground "#FF0033")
  (set-face-attribute 'rainbow-blocks-depth-2-face nil
                      :foreground "#FF8C00")
  (set-face-attribute 'rainbow-blocks-depth-3-face nil
                      :foreground "##FFD700")
  (set-face-attribute 'rainbow-blocks-depth-4-face nil
                      :foreground "#90EE90")
  (set-face-attribute 'rainbow-blocks-depth-5-face nil
                      :foreground "#000080")
  (set-face-attribute 'rainbow-blocks-depth-6-face nil
                      :foreground "#800080")
  (set-face-attribute 'rainbow-blocks-depth-7-face nil
                      :foreground "#DA70D6")
  (set-face-attribute 'rainbow-blocks-depth-8-face nil
                      :foreground "#FF69B4")
  (set-face-attribute 'rainbow-blocks-depth-9-face nil
                      :foreground "#A52A2A")
)
;; <<< E N D rainbow mode

;; >>> START auto-complete configuration
(when (package-installed-p 'auto-complete)
  ;; Auto complete
  (require 'auto-complete-config)
  (ac-config-default)
  (setq ac-quick-help-delay 0.2)
  )
;; <<< E N D auto-complete configuration

;; >>> START company
(when (package-installed-p 'company)
  (add-hook 'after-init-hook 'global-company-mode)
  )
;; <<< E N D company

;; >>> START mmm-mode
(when (package-installed-p 'mmm-mode)
  (require 'mmm-auto)
  (setq mmm-global-mode 'maybe)
  (add-to-list 'auto-mode-alist '("\\.nw" . latex-mode))
  (mmm-add-mode-ext-class nil "\\.nw\\'" 'noweb)
  ; add this line for region mode
  ; % -*- mmm-noweb-code-mode : c-mode; -*-
  )
;; <<< E N D mmm-mode

;; >>> START polymode
(when (package-installed-p 'polymode)
  (global-font-lock-mode t)
  (require 'polymode)
  (require 'poly-noweb)
  (defcustom pm-inner/noweb+C
    (clone pm-inner/noweb :mode 'c-mode)
    "Noweb innermode for C"
    :group 'innermodes
    :type 'object)
  (defcustom pm-poly/noweb+C
    (clone pm-poly/noweb :innermode 'pm-inner/noweb+C)
    "Noweb polymode for C"
    :group 'polymodes
    :type 'object)
  (define-polymode poly-noweb+C-mode pm-poly/noweb+C)
  (add-to-list 'auto-mode-alist '("\\.Cnw" . poly-noweb+C-mode))
  (when (package-installed-p 'rainbow-delimiters)
    (add-hook 'poly-noweb+C-mode-hook 'rainbow-delimiters-mode)
    )
  )
;; <<< E N D poly mode

;; >>> START java (eclim)
(when (package-installed-p 'emacs-eclim)
  (require 'eclim)
  (global-eclim-mode)
  ;; control eclimd from emacs
  (require 'eclimd)
  ;; eclipse path
  (custom-set-variables
   '(eclim-eclipse-dirs '("/Volumes/DATA/Eclipse.app/Contents/Eclipse/"))
   '(eclim-executable "/Volumes/DATA/Eclipse.app/Contents/Eclipse/eclim"))
  ;; display local help at error points
  (setq help-at-pt-display-when-idle t)
  (setq help-at-pt-timer-delay 0.1)
  (help-at-pt-set-timer)
  ;; configure auto-complete
  (when (package-installed-p 'auto-complete)
    ;; add the emacs-eclim source
    (require 'ac-emacs-eclim-source)
    (ac-emacs-eclim-config)
    )
  )
;; <<< E N D java (eclim)

;; >>> START clojure development
(when (package-installed-p 'paredit)
  ;; paredit
  (add-hook 'clojure-mode-hook 'paredit-mode)
  (add-hook 'cider-repl-mode-hook 'paredit-mode)
)
(show-paren-mode 1)
(when (package-installed-p 'ac-cider)
  ;; cider auto-complete
  (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
  (require 'ac-cider)
  (add-hook 'cider-mode-hook 'ac-flyspell-workaround)
  (add-hook 'cider-mode-hook 'ac-cider-setup)
  (add-hook 'cider-repl-mode-hook 'ac-cider-setup)
  (eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'cider-mode))
  (defun set-auto-complete-as-completion-at-point-function ()
    (setq completion-at-point-functions '(auto-complete)))
  (add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)
  (add-hook 'cider-mode-hook 'set-auto-complete-as-completion-at-point-function)
  )
(when (package-installed-p 'ac-nrepl)
  ;; nrepl auto-complete
  (require 'ac-nrepl)
  (add-hook 'cider-repl-mode-hook 'ac-nrepl-setup)
  (add-hook 'cider-mode-hook 'ac-nrepl-setup)
  (eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'cider-repl-mode))
  (add-hook 'cider-repl-mode-hook 'set-auto-complete-as-completion-at-point-function)
)
;; <<< E N D clojure development

;; >>> START multiple cursor
(when (package-installed-p 'multiple-cursors)
  ;; multiple cursor
  (require 'multiple-cursors)
  (global-set-key (kbd "C-c m ,") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c m .") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c m 8") 'mc/mark-all-like-this)
)
;; <<< E N D multiple cursor

;; >>> START projectile
(when (package-installed-p 'projectile)
  ;; enable projectile
  (projectile-global-mode)
  (setq projectile-enable-caching t)
)
;; <<< E N D projectile

;; >>> START cc-mode
(when (package-installed-p 'cc-mode)
  ;; tempo setup
  (require 'tempo)
  (setq tempo-interactive t)
  (defvar java-tempo-tags nil
    "Tempo tags for java mode")
  (defvar c-tempo-tags nil
    "Tempo tags for C mode")
  (when (package-installed-p 'ggtags)
    ; get emacs to find global external program
    (setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
    (setq exec-path (append exec-path '("/usr/local/bin")))
    (add-hook 'c-mode-hook
              (lambda ()
                (ggtags-mode 1)
                (tempo-use-tag-list 'c-tempo-tags)))
    (add-hook 'c++-mode-hook
              (lambda ()
                (ggtags-mode 1)))
    (add-hook 'java-mode-hook
              (lambda ()
                (ggtags-mode 1)
                (tempo-use-tag-list 'java-tempo-tags)))
    )
  ;; the following macros allow to set point using the ~ character in tempo templates
  (defvar tempo-initial-pos nil
    "Initial position in template after expansion")
  (defadvice tempo-insert( around tempo-insert-pos act )
    "Define initial position."
    (if (eq element '~)
        (setq tempo-initial-pos (point-marker))
      ad-do-it))
  (defadvice tempo-insert-template( around tempo-insert-template-pos act )
    "Set initial position when defined. ChristophConrad"
    (setq tempo-initial-pos nil)
    ad-do-it
    (if tempo-initial-pos
        (progn
          (put template 'no-self-insert t)
          (goto-char tempo-initial-pos))
      (put template 'no-self-insert nil)))
  ;; java templates
  (tempo-define-template "java-package"
                         '("package "
                           (when (string-match "/src/main/java/" default-directory)
                             (replace-regexp-in-string "/" "."
                                                       (substring default-directory
                                                                  (+ (string-match "/src/main/java/" default-directory) 15)
                                                                  (- (length default-directory) 1)))
                             )
                           ";" > n)
                         "package"
                         "Declare package at the beginning of java source file"
                         'java-tempo-tags)
  (tempo-define-template "java-import"
                         '("import " >  (p "Import: ") ";" n)
                         "import"
                         "Declare imports"
                         'java-tempo-tags)
  (tempo-define-template "java-class"
                         '("public class " > (substring (buffer-name) 0 (- (length (buffer-name)) 5)) > n " {" > n > r ~ > n "}" > n )
                         "class"
                         "Declare a class"
                         'java-tempo-tags)
  (tempo-define-template "java-interface"
                         '("public interface " > (substring (buffer-name) 0 (- (length (buffer-name)) 5)) > n " {" > n > r ~ > n "}" > n )
                         "interface"
                         "Declare an interface"
                         'java-tempo-tags)
  (tempo-define-template "java-attr"
                       '("private " (p "Type: " type) " " (p "Name: " var) ";" > n n
                         "public " > (s type) " get" (upcase-initials (tempo-lookup-named 'var))
                         "() {" > n
                         "return this." (s var)  ";" > n "}" > n n
                         "public void set" (upcase-initials (tempo-lookup-named 'var))
                         "(final " (s type) " " (s var) ") {" > n
                         "this." (s var) " = " (s var) ";" > n "}" > n)
                         "attribute"
                         "Declare attribute with getter, setter"
                         'java-tempo-tags)
  ; TODOS: osgi templates
  ;; c templates
  (tempo-define-template "c-include"
                         '("#include <" r ".h>" > n
                           )
                         "include"
                         "Insert a #include <> statement"
                         'c-tempo-tags)

  (tempo-define-template "c-define"
                         '("#define " r " " > n
                           )
                         "define"
                         "Insert a #define statement"
                         'c-tempo-tags)

  (tempo-define-template "c-ifdef"
                         '("#ifdef " (p "ifdef-condition: " clause) > n> p n
                           "#else /* !(" (s clause) ") */" n> p n
                           "#endif // " (s clause) n>
                           )
                         "ifdef"
                         "Insert a #ifdef #else #endif statement"
                         'c-tempo-tags)

  (tempo-define-template "c-ifndef"
                         '("#ifndef " (p "ifndef-clause: " clause) > n 
                           "#define " (s clause) n> p n
                           "#endif // " (s clause) n>
                           )
                         "ifndef"
                         "Insert a #ifndef #define #endif statement"
                         'c-tempo-tags)
  (tempo-define-template "c-if"
                         '(> "if (" ~ " ) { "  n>
                             > n
                             "}" > n> 
                             )
                         "if"
                         "Insert a C if statement"
                         'c-tempo-tags)

  (tempo-define-template "c-else"
                         '(> "else {" n>
                             > ~ n 
                             "}" > n>
                             )
                         "else"
                         "Insert a C else statement"
                         'c-tempo-tags)
  (tempo-define-template "c-while"
                         '(> "while (" ~ " ) { "  n>
                             > n
                             "}" > n>      
                             )
                         "while"
                         "Insert a C while statement"
                         'c-tempo-tags)

  (tempo-define-template "c-for"
                         '(> "for (" ~ " ) { "  n>
                             > n
                             "}" > n>      
                             )
                         "for"
                         "Insert a C for statement"
                         'c-tempo-tags)
  (tempo-define-template "c-main"
                         '(> "int main(int argc, char *argv[]) {" >  n> 
                             > r n
                             "return 0;" > n
                             "}" > n>
                             )
                         "main"
                         "Insert a C main statement"
                         'c-tempo-tags)

  (tempo-define-template "c-switch"
                         '(> "switch(" (p "variable to check: " clause) ") {" >  n>  
                             "case " > (p "first value: ") ": " ~ > n>
                             " break;" > n>
                             >"default:" > n>
                             "}" > n>
                             )
                         "switch"
                         "Insert a C switch statement"
                         'c-tempo-tags)
  ;; TODO: function template
  )
;; <<< E N D cc-mode

;; >>> START scala development
(when (package-installed-p 'ensime)
  (setq exec-path (append exec-path '("/usr/local/bin")))
  ;; scala ensime hook
  (require 'ensime)
  (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
)
;; <<< E N D scala development

;; >>> START recent file
(when (package-installed-p 'recentf)
  ;; recentf
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
)
;; <<< E N D recent file

;; >>> START powerline
(when (package-installed-p 'powerline)
  ;; powerline
  (require 'powerline)
  (powerline-center-theme)
  (if (display-graphic-p)
    ;; use wave instead of arrow
    (custom-set-variables '(powerline-default-separator 'contour))
    (custom-set-variables
     '(powerline-utf-8-separator-left #x003E)
     '(powerline-utf-8-separator-right #x003C)))
  (setq powerline-default-separator-dir '(left . right))
)
;; <<< E N D powerline

;; >>> START relative line number
(when (package-installed-p 'relative-line-numbers)
  ;; enable relative line number
  (global-relative-line-numbers-mode)
)
;; <<< E N D relative line number

;; >>> START evil
(when (package-installed-p 'evil)
  ;; evil mode by default
  (require 'evil)
  (evil-mode 1)
  ;; set cursor color
  (setq evil-emacs-state-cursor '("#98AFC7" box)) ; blue gray
  (setq evil-normal-state-cursor '("#6AFB92" box)) ; dragon green
  (setq evil-visual-state-cursor '("#659EC7" box)) ; blue koi
  (setq evil-insert-state-cursor '("#FFE87C" bar)) ; sun yellow
  (setq evil-replace-state-cursor '("#FFE87C" bar))
  (setq evil-operator-state-cursor '("#FFE87C" hollow))
  ;; ESC key fix
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  ;; define keys
  (define-key evil-normal-state-map "ff" 'find-file) ;; file find
  (when (package-installed-p 'recentf)
    (define-key evil-normal-state-map "fr" 'recentf-open-files) ;; file recent
    )
  ; removed : various key map
  ;; evil-leader settings
  (when (package-installed-p 'evil-leader)
    (setq evil-leader/in-all-states 1)
    (global-evil-leader-mode t)
    ;; set leader to space
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
     "f" 'find-file
     "q" 'save-buffers-kill-terminal)
    ; removed : various leader map
    (defun sys-open-current-buffer()
      "Open current buffer using system default application"
      (interactive)
      (when (buffer-modified-p)
        (when (y-or-n-p "Buffer is modified, Save?")
          (save-buffer)))
      (shell-command (concat "open " (buffer-file-name))))
    (evil-leader/set-key
     "xx" 'sys-open-current-buffer)
    )
)
;; <<< E N D evil

;; >>> START keys define
(when (package-installed-p 'hydra)
  (require 'hydra)
  ;; File open/close
  (global-set-key (kbd "<f2> f f") 'find-file) ;; file find
  (global-set-key (kbd "<f2> f q") 'save-buffers-kill-terminal) ;; file quit
  (global-set-key (kbd "<f2> f s") 'save-buffer) ;; file save
  (global-set-key (kbd "<f2> f k") 'kill-buffer) ;; file quit
  (global-unset-key (kbd "<f2> b")) ;; unbind associate buffer
  (global-set-key (kbd "<f2> b b") 'switch-to-buffer) ;; file buffer _tka
  (when (package-installed-p 'recentf)
    (global-set-key (kbd "<f2> r r") 'recentf-open-files) ;; file recent _tka
    )
  (when (package-installed-p 'sr-speedbar)
    (global-set-key (kbd "<f2> f l") 'sr-speedbar-open) ;; file buffer
    (global-set-key (kbd "<f2> f h") 'sr-speedbar-close) ;; file buffer
    )
  ;; getting help
  (global-set-key (kbd "<f2> h k") 'describe-key)
  (global-set-key (kbd "<f2> h f") 'describe-function)
  ;; moving point
  (global-set-key (kbd "<f2> l l") 'move-end-of-line)
  (global-set-key (kbd "<f2> h h") 'move-beginning-of-line)
  (when (package-installed-p 'smartparens)
    (add-hook 'prog-mode-hook (lambda () (interactive)
                                (local-set-key (kbd "<f2> j j") 'sp-end-of-sexp)
                                (local-set-key (kbd "<f2> k k") 'sp-beginning-of-sexp)
                                (local-set-key (kbd "<f2> DEL") 'sp-unwrap-sexp)
                                ))
    )
  (defhydra hydra-move ()
    ("l" (lambda (delta) (interactive "p") (move-to-column (+ (current-column) delta))) "right")
    ("h" (lambda (delta) (interactive "p") (move-to-column (max 0 (- (current-column) delta)))) "left")
    ("j" (lambda (delta) (interactive "p") (next-line delta)) "down")
    ("k" (lambda (delta) (interactive "p") (previous-line delta)) "up")
    ("o" move-end-of-line "end")
    ("y" move-beginning-of-line "home")
    ("u" end-of-buffer "buffer end")
    ("i" beginning-of-buffer "buffer begin"))
  (global-set-key (kbd "<f5> m") 'hydra-move/body)
  (defhydra hydra-resize-window ()
    ("h" shrink-window-horizontally "shrink left")
    ("l" enlarge-window-horizontally "enlarge right")
    ("k" shrink-window "shrink up")
    ("j" enlarge-window "enlarge down")
    ("o" other-window "to other"))
  (global-set-key (kbd "<f5> w") 'hydra-resize-window/body)
  ;; editing
  (global-set-key (kbd "<f2> m m") 'set-mark-command) ;; _tka
  (global-set-key (kbd "<f2> x x") 'kill-region) ;; _tka
  (global-set-key (kbd "<f2> c c") 'kill-ring-save) ;; _tka
  (global-set-key (kbd "<f2> p p") 'yank) ;; _tka
  (when (package-installed-p 'undo-tree)
    (global-undo-tree-mode)
    (global-set-key (kbd "<f2> u v") 'undo-tree-visualize))
  (global-set-key (kbd "<f2> u u") 'undo) ;; _tka
  (global-set-key (kbd "<f2> y y") 'kill-whole-line) ;; _tka
  (global-set-key (kbd "<f2> t") 'tempo-complete-tag)
  ;; rectangle
  (global-set-key (kbd "<f2> r c") 'copy-rectangle-as-kill) ;; rec copy _tka
  (global-set-key (kbd "<f2> r x") 'kill-rectangle) ;; rec cut _tka
  (global-set-key (kbd "<f2> r p") 'yank-rectangle) ;; rec paste
  (global-set-key (kbd "<f2> r d") 'delete-rectangle) ;; rec delete
  (add-hook
   'picture-mode-hook
   (lambda ()
     (define-key picture-mode-map (kbd "<f2> r o") 'picture-clear-rectangle) ;; rec out
     (define-key picture-mode-map (kbd "<f2> r i") 'picture-yank-rectangle) ;; rec insert
     ))
  ;; window
  (global-set-key (kbd "<f2> w h") 'delete-window) ;; window close _tka
  (global-set-key (kbd "<f2> w l") 'split-window-right) ;; window ->
  (global-set-key (kbd "<f2> w j") 'split-window-below) ;; window _|_
  (global-set-key (kbd "<f2> w o") 'other-window) ;; window other
  ;; search
  (global-unset-key (kbd "<f2> s"))
  (global-set-key (kbd "<f2> s j") 'isearch-forward) ;; search _|_
  (global-set-key (kbd "<f2> s k") 'isearch-backward) ;; search ^
  (global-set-key (kbd "<f2> /") 'isearch-forward) ;; search _|_
  (global-set-key (kbd "<f2> \\") 'isearch-backward) ;; search ^
  (add-hook 'isearch-mode-hook
            (lambda ()
              (define-key isearch-mode-map (kbd "<f2> j") 'isearch-repeat-forward)
              (define-key isearch-mode-map (kbd "<f2> k") 'isearch-repeat-backward)
              ))
  (global-set-key (kbd "<f2> s r") 're-builder) ;; search regex
  ;; execute commands
  ; use build-in ESC-x to execute commands
  (global-set-key (kbd "<f2> z z") 'execute-extended-command)
  (global-set-key (kbd "<f2> x c") 'compile)
  (global-set-key (kbd "<f2> x e") 'eval-last-sexp)
  (global-set-key (kbd "<f2> g") 'keyboard-escape-quit)
  ;; my use of note
  (when (fboundp 'mode-line-note-set)
    (global-set-key (kbd "<f2> n s") 'mode-line-note-set)
    (global-set-key (kbd "<f2> n x") 'mode-line-note-off)
    )
  ;; org mode
  (when (package-installed-p 'org)
    (require 'org)
    (define-key org-mode-map (kbd "<f2> o c") 'org-ctrl-c-ctrl-c) ;; org check
    (define-key org-mode-map (kbd "<f2> o t") 'org-todo) ;; org todo
    (define-key org-mode-map (kbd "<f2> o r") 'org-meta-return) ;; org return
    (define-key org-mode-map (kbd "<f2> o a") 'org-agenda) ;; org agenda
    )
  (when (package-installed-p 'imenu)
    (define-key org-mode-map (kbd "<f2> i g") 'ido-goto-symbol) ;; org goto
    )
  (when (package-installed-p 'deft)
    (global-set-key (kbd "<f2> n v") 'deft) ;; notational velocity
    )
  ;; projectile
  (when (package-installed-p 'projectile)
    (define-key projectile-mode-map (kbd "<f2> p f") 'projectile-find-file) ;; project file
    (define-key projectile-mode-map (kbd "<f2> p g") 'projectile-find-file-dwim)
    (define-key projectile-mode-map (kbd "<f2> p b") 'projectile-switch-to-buffer)
    (define-key projectile-mode-map (kbd "<f2> p r") 'projectile-recentf) ;; project recent
    )
  ;; ggtags
  (when (package-installed-p 'ggtags)
    (add-hook 'ggtags-mode-hook
          (lambda ()
            (local-set-key (kbd "<f2> p t f") 'ggtags-find-file)
            (local-set-key (kbd "<f2> p t r") 'ggtags-find-reference)
            (local-set-key (kbd "<f2> p t d") 'ggtags-find-definition)
            (local-set-key (kbd "<f2> p t t") 'ggtags-find-tag-dwim)
            ))
    )
  )

;; <<< E N D keys define 

;; >>> START helm
(when (package-installed-p 'helm)
  (require 'helm)
  (require 'helm-config)
  ; change helm header font
  (custom-set-faces
   '(helm-source-header ((t (:background "#22083397778B"
                                         :foreground "white"
                                         :weight bold
                                         :height 1.0
                                         :family "Source Code Pro")))))
  ; change helm prefix
  (global-set-key (kbd "<f2> h x") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  ; change some config
  (setq helm-split-window-in-side-p            t
        helm-move-to-line-cycle-in-source      t
        helm-ff-search-library-in-sexp         t
        helm-scroll-amount                     8
        helm-ff-file-name-history-use-recentf  t
        helm-M-x-fuzzy-match                   t
        helm-buffers-fuzzy-matching            t
        helm-recentf-fuzzy-match               t)
  ; start helm
  (helm-mode 1)
  (helm-autoresize-mode t)
  ; bind keys
  (global-set-key (kbd "<f2> z z") 'helm-M-x)
  (global-set-key (kbd "<f2> k r") 'helm-show-kill-ring)
  (global-set-key (kbd "<f2> f f") 'helm-find-files)
  (global-set-key (kbd "<f2> r r") 'helm-mini)
  (when (package-installed-p 'helm-swoop)
    (global-set-key (kbd "<f2> h s") 'helm-swoop)
    )
  (when (package-installed-p 'helm-projectile)
    (define-key projectile-mode-map (kbd "<f2> p f") 'helm-projectile) ;; project file
    (define-key projectile-mode-map (kbd "<f2> p g") 'helm-projectile-grep)
    (define-key projectile-mode-map (kbd "<f2> p b") 'helm-projectile-switch-to-buffer)
    (define-key projectile-mode-map (kbd "<f2> p r") 'helm-projectile-recentf) ;; project recent
    )
  )
;; <<< E N D helm

;; >>> START key-chord
(when (package-installed-p 'key-chord)
  (require 'key-chord)
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.3)
  ;; define keychord, but in one way fashion
  (defun key-chord-define-oneway (keymap keys command)
  "Define in KEYMAP, a key-chord of two keys in KEYS starting a COMMAND.
\nKEYS can be a string or a vector of two elements. Currently only elements
that corresponds to ascii codes in the range 32 to 126 can be used.
\nCOMMAND can be an interactive function, a string, or nil.
If COMMAND is nil, the key-chord is removed."
  (if (/= 2 (length keys))
      (error "Key-chord keys must have two elements"))
  ;; Exotic chars in a string are >255 but define-key wants 128..255 for those
  (let ((key1 (logand 255 (aref keys 0)))
	(key2 (logand 255 (aref keys 1))))
    (if (eq key1 key2)
	(define-key keymap (vector 'key-chord key1 key2) command)
      ;; else
      (define-key keymap (vector 'key-chord key1 key2) command))))
  ;; global define
  (defun key-chord-define-oneway-global (keys command)
  "Define a key-chord of two keys in KEYS starting a COMMAND.
\nKEYS can be a string or a vector of two elements. Currently only elements
that corresponds to ascii codes in the range 32 to 126 can be used.
\nCOMMAND can be an interactive function, a string, or nil.
If COMMAND is nil, the key-chord is removed."
  (interactive "sSet key chord globally (2 keys): \nCSet chord \"%s\" to command: ")
  (key-chord-define-oneway (current-global-map) keys command))
  ;; The global command mode
  (setq use-chord-command nil)
  (defun chord-command-on ()
    (interactive)
    (setq use-chord-command t)
    (when (display-graphic-p)
      (setq-default cursor-type 'box)
      (set-cursor-color "#ECB028")
      (blink-cursor-mode 0)))
  (defun chord-command-off ()
    (interactive)
    (setq use-chord-command nil)
    (when (display-graphic-p)
      (setq-default cursor-type 'hollow)
      (set-cursor-color "#6AFB92")
      (blink-cursor-mode 0)))
  ;; Set global flag on/off
  (key-chord-define-oneway-global "fj" 'chord-command-on) ;; down-up
  (key-chord-define-oneway-global "jf" 'chord-command-off) ;; up-down
  ;; File open/close
  (key-chord-define-oneway-global "ff" (lambda () (interactive) (if use-chord-command (call-interactively 'find-file) (insert "ff")))) ;; file find
  (key-chord-define-oneway-global "fq" (lambda () (interactive) (if use-chord-command (call-interactively 'save-buffers-kill-terminal) (insert "fq")))) ;; file quit
  (when (package-installed-p 'recentf)
    (key-chord-define-oneway-global "rr" (lambda () (interactive) (if use-chord-command (call-interactively 'recentf-open-files) (insert "rr")))) ;; file recent _tka
    )
  ; removed : various similar keychord-'mode' key map
  (when nil
    ;; File open/close
    (key-chord-define-oneway-global "FF" 'find-file) ;; file find
    (key-chord-define-oneway-global "FQ" 'save-buffers-kill-terminal) ;; file quit
    (when (package-installed-p 'recentf)
      (key-chord-define-oneway-global "FR" 'recentf-open-files) ;; file recent
      )
    ; removed : various keychord caplock binding
    )
  )
;; <<< E N D key-chord

;; >>> START generic modes
(when nil
  (require 'generic-x)
  (define-generic-mode 'quan-journal-mode
    '() ;; comment start list
    '() ;; preserved key words list
    '(("\\(^>[^<]*<$\\)" . 'font-lock-comment-face)
      ("\\(==.*=\\)" . 'font-lock-constant-face)
      ("\\(\*.*\*\\)" . 'font-lock-variable-name-face)
      ("\\(vim:.*\\)" . 'font-lock-comment-face)
      ("\\(^>$\\)" . 'font-lock-comment-face)
      ("\\(^   .*\\)" . 'font-lock-comment-face)
      ("\\(^<$\\)" . 'font-lock-comment-face)) ;; customized render
    '("journal.*$")
    nil
    "A mode for writting my journal in emacs, originally in vm help format"
  ))
;; <<< E N D generic modes

;; >>> START org
(when (package-installed-p 'org)
  ;; org mode work flow
  (setq org-todo-keywords 
        '((sequence "TODO(1!)" "DOING(2!)" "BLOCKED(3@/!)" "REVIEW(4)" "|" "DONE(5!)" "ARCHIVED(6@)")
          (sequence "NEW(A!)" "FAIL(I!)" "ASSIGNED(B@/!)" "ONGOING(C!)" "CONFIRM(D@)" "BUILDREADY(E!)" "VERIFYREADY(F!)" "|" "PASSED(G!)" "DEFFER(H!)")))
  (setq org-todo-keyword-faces
        '(("TODO" . "#FFE87C")
          ("DOING" . "#6AFB92")
          ("BLOCKED" . "red")
          ("REVIEW" . "#659EC7")
          ("DONE" . "#98AFC7")
          ("ARCHIVED" .  "gray")
          ("NEW" . "red")
          ("FAIL" . "red")
          ("ASSIGNED" . "green")
          ("ONGOING" . "green")
          ("CONFIRM" . "red")
          ("BUILDREADY" . "blue")
          ("VERIFYREADY" . "blue")
          ("PASSED" . "gray")
          ("DEFFER" . "gray")))
  (setq org-agenda-files (quote ("~/org")))
  )
;; enable babel languages
(when (package-installed-p 'babel)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sql . t) (java . t) (C . t) (emacs-lisp . t)))
  (setq org-src-fontify-natively t)
  )
;; integrate deft with org
(when (package-installed-p 'deft)
                                        ;(setq deft-extension nil)
  (setq deft-extensions '("org" "md"))
  (setq deft-directory "~/org/deft/")
  (setq deft-text-mode 'org-mode)
                                        ;(setq deft-use-filename-as-title t)
                                        ;(global-set-key (kbd "<f9>") 'deft))
  (require 'deft)
  )
(when (package-installed-p 'imenu)
  ; by huylnq : goto symbols using imenu
  (defun ido-goto-symbol (&optional symbol-list)
    "Refresh imenu and jump to a place in the buffer using Ido."
    (interactive)
    (unless (featurep 'imenu)
      (require 'imenu nil t))
    (cond
     ((not symbol-list)
      (let ((ido-mode ido-mode)
            (ido-enable-flex-matching
             (if (boundp 'ido-enable-flex-matching)
                 ido-enable-flex-matching t))
            name-and-pos symbol-names position)
        (unless ido-mode
          (ido-mode 1)
          (setq ido-enable-flex-matching t))
        (while (progn
                 (imenu--cleanup)
                 (setq imenu--index-alist nil)
                 (ido-goto-symbol (imenu--make-index-alist))
                 (setq selected-symbol
                       (ido-completing-read "Symbol? " symbol-names))
                 (string= (car imenu--rescan-item) selected-symbol)))
        (unless (and (boundp 'mark-active) mark-active)
          (push-mark nil t nil))
        (setq position (cdr (assoc selected-symbol name-and-pos)))
        (cond
         ((overlayp position)
          (goto-char (overlay-start position)))
         (t
          (goto-char position)))))
     ((listp symbol-list)
      (dolist (symbol symbol-list)
        (let (name position)
          (cond
           ((and (listp symbol) (imenu--subalist-p symbol))
            (ido-goto-symbol symbol))
           ((listp symbol)
            (setq name (car symbol))
            (setq position (cdr symbol)))
           ((stringp symbol)
            (setq name symbol)
            (setq position
                  (get-text-property 1 'org-imenu-marker symbol))))
          (unless (or (null position) (null name)
                      (string= (car imenu--rescan-item) name))
            (add-to-list 'symbol-names name)
            (add-to-list 'name-and-pos (cons name position))))))))
)
;; <<< E N D org

;; >>> START functions for emacs shells
(when nil
  ;; set $PATH for shells
  (when (display-graphic-p)
    (let '(path "/Users/sstvn/Dev/Applications/groovy-2.1.9/bin:/Users/sstvn/springsource/spring-roo-1.2.4.RELEASE/bin:/Users/sstvn/Dev/Applications/mongodb-osx-x86_64-2.4.8/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/Users/sstvn/Dev/Applications/vert.x-2.0.2-final/bin:/Users/sstvn/Dev/Applications/apache-maven-3.1.1/bin:/usr/local/mysql/bin:/Users/sstvn/Dev/ShellScript:/Users/sstvn/clojure:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home:/Users/sstvn/scala-2.11.4/bin")
      (setenv "PATH" path)
      (setq exec-path
            (append
             (split-string-and-unquote path ":")
             exec-path)))
    (setenv "JAVA_HOME" "/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home")
    )
  ;; shells with different buffer names
  (defun bash (buffer-name)
    "Start a terminal and rename buffer."
    (interactive "sbuffer name: ")
    (term "/bin/bash")
    (rename-buffer buffer-name t))
  (defun zsh (buffer-name)
    "Start a terminal and rename buffer."
    (interactive "sbuffer name: ")
    (term "/bin/zsh")
    (rename-buffer buffer-name t))
  (defun fish (buffer-name)
    "Start a terminal with BUFFER-NAME."
    (interactive "sbuffer name:")
    (term "/usr/local/bin/fish")
    (rename-buffer buffer-name t))
  )
;; <<< E N D functions for emacs shells

;; <<<<<<< E N D re-organizing configuration

;; startup files
;(find-file "~/tryorg.org")
;(find-file "~/emacs-cheat-sheet.org")
;(find-file "~/vms-maven/.projectile")

;;; .emacs ends here
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("b85fc9f122202c71b9884c5aff428eb81b99d25d619ee6fde7f3016e08515f07" default)))
 '(safe-local-variable-values
   (quote
    ((mmm-noweb-code-mode . haskell-mode)
     (mmm-noweb-code-mode . c-mode)))))
