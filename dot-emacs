;; >>>>>>> START re-organizing configuration

;; >>> START global interface fix
;; fix key M S C in mac
(set-keyboard-coding-system nil)
;; do not show help
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
;; monospace font for better drawing
(when (display-graphic-p)
  (add-to-list 'default-frame-alist
               '(font . "Inconsolata-14"))
  (set-face-attribute 'default nil
                      :family "Inconsolata" :height 140)
  (set-face-attribute 'fixed-pitch nil :font "Inconsolata-14")
  (set-face-attribute 'variable-pitch nil :font "Inconsolata-14")
  )
(when (display-graphic-p)
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-level-1 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-2 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-3 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-4 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0))))
   '(org-level-5 ((((class color) (min-colors 89)) (:inherit variable-pitch :height 1.0)))))
)
;; disable all dialog
(defadvice yes-or-no-p (around prevent-dialog activate)
  "Prevent yes-or-no-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice y-or-n-p (around prevent-dialog-yorn activate)
  "Prevent y-or-n-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice message-box (around prevent-dialog activate)
  "Prevent message-box from activating a dialog"
  (apply #'message (ad-get-args 0)))
;; disable scrollbar
(when (display-graphic-p)
  (scroll-bar-mode -1)
)
(setq mouse-wheel-progressive-speed nil)
;; kill toolbar too
(when (display-graphic-p)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
)
;; RET auto-indent
(define-key global-map (kbd "RET") 'newline-and-indent)
;; spaces for tabs
(setq-default indent-tabs-mode nil)
;; enable navigate with arrows
(defun disable-guru-mode ()
  (guru-mode -1))
(add-hook 'prelude-prog-mode-hook 'disable-guru-mode t)
;;(setq visible-bell t)
(setq visible-bell 'top-bottom)
;; icicle
(icomplete-mode 99)
;; line display
(line-number-mode t)
(column-number-mode t)
(global-hl-line-mode -1)
;; view large files instead of editing it 
(defun my-find-file-check-make-large-file-read-only-hook ()
  "If a file is over a given size, make the buffer read only."
  (when (> (buffer-size) (* 1024 1024))
    (setq buffer-read-only t)
    (buffer-disable-undo)
    (fundamental-mode)))
(add-hook 'find-file-hooks 'my-find-file-check-make-large-file-read-only-hook)
;; <<< E N D global interface fix

;; >>> START package manager
;; melpa package repository
(require 'package)
;;(add-to-list 'package-archives
;;  '("melpa" . "http://melpa.milkbox.net/packages/") t)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
;; uncomment after cleaning up
;(package-refresh-contents)
(package-initialize)
;; themes
(unless (package-installed-p 'solarized-theme)
  (package-install 'solarized-theme))
(unless (package-installed-p 'zenburn-theme)
  (package-install 'zenburn-theme))
(unless (package-installed-p 'obsidian-theme)
  (package-install 'obsidian-theme))
(unless (package-installed-p 'inkpot-theme)
  (package-install 'inkpot-theme))
(unless (package-installed-p 'monokai-theme)
  (package-install 'monokai-theme))
;; generic eye candies
(unless (package-installed-p 'rainbow-delimiters)
  (package-install 'rainbow-delimiters))
(unless (package-installed-p 'auto-complete)
  (package-install 'auto-complete))
;(unless (package-installed-p 'rainbow-mode)
;  (package-install 'rainbow-mode))
;(unless (package-installed-p 'rainbow-blocks)
;  (package-install 'rainbow-blocks))
;(unless (package-installed-p 'evil)
;  (package-install 'evil))
;(unless (package-installed-p 'evil-leader)
;  (package-install 'evil-leader))
;(unless (package-installed-p 'evil-tutor)
;  (package-install 'evil-tutor))
(unless (package-installed-p 'powerline)
  (package-install 'powerline))
;(unless (package-installed-p 'powerline-evil)
;  (package-install 'powerline-evil))
(unless (package-installed-p 'relative-line-numbers)
  (package-install 'relative-line-numbers))
(unless (package-installed-p 'smart-tabs-mode)
  (package-install 'smart-tabs-mode))
;(unless (package-installed-p 'multiple-cursors)
;  (package-install 'multiple-cursors))
;; clojure development
(unless (package-installed-p 'cider)
  (package-install 'cider))
(unless (package-installed-p 'ac-cider)
  (package-install 'ac-cider))
(unless (package-installed-p 'ac-nrepl)
  (package-install 'ac-nrepl))
(unless (package-installed-p 'paredit)
  (package-install 'paredit))
;; scala development
(unless (package-installed-p 'ensime)
  (package-install 'ensime))
(unless (package-installed-p 'scala-mode2)
  (package-install 'scala-mode2))
;; lua development
(unless (package-installed-p 'lua-mode)
  (package-install 'lua-mode))
;; C development
(unless (package-installed-p 'cc-mode)
  (package-install 'cc-mode))
;; misc modes
(unless (package-installed-p 'json-mode)
  (package-install 'json-mode))
(unless (package-installed-p 'org)
  (package-install 'org))
(unless (package-installed-p 'markdown-mode)
  (package-install 'markdown-mode))
(unless (package-installed-p 'projectile)
  (package-install 'projectile))
(unless (package-installed-p 'key-chord)
  (package-install 'key-chord))
;; compile installed packages
(byte-recompile-directory (expand-file-name "~/.emacs.d") 0)
;; <<< E N D package manager

;; >>> START rainbow mode
(when (package-installed-p 'rainbow-delimiters)
  ;; rainbow delimiters
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  )
;; rainbow blocks in org
(when (package-installed-p 'rainbow-blocks)
  (require 'rainbow-blocks)
  (add-hook 'org-mode-hook 'rainbow-blocks-mode)
  ;; true rainbow color for rainbow blocks
  (set-face-attribute 'rainbow-blocks-unmatched-face nil
                      :foreground "#8B0000")
  (set-face-attribute 'rainbow-blocks-depth-1-face nil
                      :foreground "#FF0033")
  (set-face-attribute 'rainbow-blocks-depth-2-face nil
                      :foreground "#FF8C00")
  (set-face-attribute 'rainbow-blocks-depth-3-face nil
                      :foreground "##FFD700")
  (set-face-attribute 'rainbow-blocks-depth-4-face nil
                      :foreground "#90EE90")
  (set-face-attribute 'rainbow-blocks-depth-5-face nil
                      :foreground "#000080")
  (set-face-attribute 'rainbow-blocks-depth-6-face nil
                      :foreground "#800080")
  (set-face-attribute 'rainbow-blocks-depth-7-face nil
                      :foreground "#DA70D6")
  (set-face-attribute 'rainbow-blocks-depth-8-face nil
                      :foreground "#FF69B4")
  (set-face-attribute 'rainbow-blocks-depth-9-face nil
                      :foreground "#A52A2A")
)
;; <<< E N D rainbow mode

;; >>> START auto-complete configuration
(when (package-installed-p 'auto-complete)
  ;; Auto complete
  (require 'auto-complete-config)
  (ac-config-default)
  (setq ac-quick-help-delay 0.2)
  )
;; <<< E N D auto-complete configuration

;; >>> START clojure development
(when (package-installed-p 'paredit)
  ;; paredit
  (add-hook 'clojure-mode-hook 'paredit-mode)
  (add-hook 'cider-repl-mode-hook 'paredit-mode)
)
(show-paren-mode 1)
(when (package-installed-p 'ac-cider)
  ;; cider auto-complete
  (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
  (require 'ac-cider)
  (add-hook 'cider-mode-hook 'ac-flyspell-workaround)
  (add-hook 'cider-mode-hook 'ac-cider-setup)
  (add-hook 'cider-repl-mode-hook 'ac-cider-setup)
  (eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'cider-mode))
  (defun set-auto-complete-as-completion-at-point-function ()
    (setq completion-at-point-functions '(auto-complete)))
  (add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)
  (add-hook 'cider-mode-hook 'set-auto-complete-as-completion-at-point-function)
  )
(when (package-installed-p 'ac-nrepl)
  ;; nrepl auto-complete
  (require 'ac-nrepl)
  (add-hook 'cider-repl-mode-hook 'ac-nrepl-setup)
  (add-hook 'cider-mode-hook 'ac-nrepl-setup)
  (eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'cider-repl-mode))
  (add-hook 'cider-repl-mode-hook 'set-auto-complete-as-completion-at-point-function)
)
;; <<< E N D clojure development

;; >>> START multiple cursor
(when (package-installed-p 'multiple-cursors)
  ;; multiple cursor
  (require 'multiple-cursors)
  (global-set-key (kbd "C-c m ,") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-c m .") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c m 8") 'mc/mark-all-like-this)
)
;; <<< E N D multiple cursor

;; >>> START projectile
(when (package-installed-p 'projectile)
  ;; enable projectile
  (projectile-global-mode)
  (setq projectile-enable-caching t)
)
;; <<< E N D projectile

;; >>> START scala development
(when (package-installed-p 'ensime)
  ;; scala ensime hook
  (require 'ensime)
  (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
)
;; <<< E N D scala development

;; >>> START recent file
(when (package-installed-p 'recentf)
  ;; recentf
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
)
;; <<< E N D recent file

;; >>> START powerline
(when (package-installed-p 'powerline)
  ;; powerline
  (require 'powerline)
  (powerline-default-theme)
)
;; <<< E N D powerline

;; >>> START relative line number
(when (package-installed-p 'relative-line-numbers)
  ;; enable relative line number
  (global-relative-line-numbers-mode)
)
;; <<< E N D relative line number

;; >>> START evil
(when (package-installed-p 'evil)
  ;; evil mode by default
  (require 'evil)
  (setq evil-leader/in-all-states 1)
  (global-evil-leader-mode t)
  (evil-mode 1)
  ;; set cursor color
  (setq evil-emacs-state-cursor '("#98AFC7" box)) ; blue gray
  (setq evil-normal-state-cursor '("#6AFB92" box)) ; dragon green
  (setq evil-visual-state-cursor '("#659EC7" box)) ; blue koi
  (setq evil-insert-state-cursor '("#FFE87C" bar)) ; sun yellow
  (setq evil-replace-state-cursor '("#FFE87C" bar))
  (setq evil-operator-state-cursor '("#FFE87C" hollow))
  ;; set leader to space
  (evil-leader/set-leader "<SPC>")
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (evil-leader/set-key
   "f" 'find-file
   "r" 'recentf-open-files
   "b" 'switch-to-buffer
   "k" 'kill-buffer
   "s" 'save-buffer
   "q" 'save-buffers-kill-terminal)
  (evil-leader/set-key
   "wsl" 'split-window-right
   "wsj" 'split-window-below
   "wo" 'other-window
   "w0" 'delete-window)
  (evil-leader/set-key-for-mode 'emacs-lisp-mode
                                "xe" 'eval-last-sexp)
  (evil-leader/set-key-for-mode 'org-mode
                                "tc" 'org-ctrl-c-ctrl-c
                                "tt" 'org-todo)
  (evil-leader/set-key-for-mode 'dired-mode
                                "gf" 'grep-find)
  (defun sys-open-current-buffer()
    "Open current buffer using system default application"
    (interactive)
    (when (buffer-modified-p)
      (when (y-or-n-p "Buffer is modified, Save?")
        (save-buffer)))
    (shell-command (concat "open " (buffer-file-name))))
  (evil-leader/set-key
   "xx" 'sys-open-current-buffer)
)
;; <<< E N D evil

;; >>> START key-chord
(when (package-installed-p 'key-chord)
  (require 'key-chord)
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.3)
  ;; define keychord, but in one way fashion
  (defun key-chord-define-oneway (keymap keys command)
  "Define in KEYMAP, a key-chord of two keys in KEYS starting a COMMAND.
\nKEYS can be a string or a vector of two elements. Currently only elements
that corresponds to ascii codes in the range 32 to 126 can be used.
\nCOMMAND can be an interactive function, a string, or nil.
If COMMAND is nil, the key-chord is removed."
  (if (/= 2 (length keys))
      (error "Key-chord keys must have two elements"))
  ;; Exotic chars in a string are >255 but define-key wants 128..255 for those
  (let ((key1 (logand 255 (aref keys 0)))
	(key2 (logand 255 (aref keys 1))))
    (if (eq key1 key2)
	(define-key keymap (vector 'key-chord key1 key2) command)
      ;; else
      (define-key keymap (vector 'key-chord key1 key2) command))))
  ;; global define
  (defun key-chord-define-oneway-global (keys command)
  "Define a key-chord of two keys in KEYS starting a COMMAND.
\nKEYS can be a string or a vector of two elements. Currently only elements
that corresponds to ascii codes in the range 32 to 126 can be used.
\nCOMMAND can be an interactive function, a string, or nil.
If COMMAND is nil, the key-chord is removed."
  (interactive "sSet key chord globally (2 keys): \nCSet chord \"%s\" to command: ")
  (key-chord-define-oneway (current-global-map) keys command))
  ;; File open/close
  (key-chord-define-oneway-global "FF" 'find-file) ;; file find
  (key-chord-define-oneway-global "FQ" 'save-buffers-kill-terminal) ;; file quit
  (key-chord-define-oneway-global "FS" 'save-buffer) ;; file save
  (key-chord-define-oneway-global "FK" 'kill-buffer) ;; file kill
  (key-chord-define-oneway-global "FB" 'switch-to-buffer) ;; file buffer (switch)
  (when (package-installed-p 'recentf)
    (key-chord-define-oneway-global "FR" 'recentf-open-files)
    )
  ;; getting help
  (key-chord-define-oneway-global "HK" 'describe-key) ;; help keys
  (key-chord-define-oneway-global "HF" 'describe-function) ;; help functions
  ;; moving point
  (key-chord-define-oneway-global "MH" 'move-beginning-of-line) ;; move <-
  (key-chord-define-oneway-global "ML" 'move-end-of-line) ;; move ->
  (key-chord-define-oneway-global "MJ" 'scroll-up-command) ;; move _|_
  (key-chord-define-oneway-global "MK" 'scroll-down-command) ;; move ^
  ;; editing (clipboard)
  (key-chord-define-oneway-global "EM" 'set-mark-command) ;; edit mark
  (key-chord-define-oneway-global "EX" 'kill-region) ;; edit cut
  (key-chord-define-oneway-global "EC" 'kill-ring-save) ;; edit copy
  (key-chord-define-oneway-global "EP" 'yank) ;; edit paste
  (key-chord-define-oneway-global "EU" 'undo) ;; edit undo
  (key-chord-define-oneway-global "EY" 'kill-whole-line) ;; edit why
  ;; window (split panes)
  (key-chord-define-oneway-global "WC" 'delete-window) ;; window close
  (key-chord-define-oneway-global "WL" 'split-window-right) ;; window ->
  (key-chord-define-oneway-global "WJ" 'split-window-below) ;; window _|_
  (key-chord-define-oneway-global "WO" 'other-window) ;; window other
  ;; search
  (key-chord-define-oneway-global "SJ" 'isearch-forward) ;; search _|_
  (key-chord-define-oneway-global "SK" 'isearch-backward) ;; search ^
  (key-chord-define-oneway-global "SR" 're-builder) ;; search regex
  ;; execute commands
  (key-chord-define-oneway-global "XX" 'execute-extended-command)
  (key-chord-define-oneway-global "JK" 'keyboard-quit)
  ;; org mode
  (when (package-installed-p 'org)
    (key-chord-define-oneway org-mode-map "OC" 'org-ctrl-c-ctrl-c) ;; org check
    (key-chord-define-oneway org-mode-map "OT" 'org-todo) ;; org todo
    (key-chord-define-oneway org-mode-map "OR" 'org-meta-return) ;; org return
    )
  ;; projectile
  (when (package-installed-p 'projectile)
    (key-chord-define-oneway projectile-mode-map "PF" 'projectile-find-file) ;; project file
    (key-chord-define-oneway projectile-mode-map "PG" 'projectile-find-file-dwim) ;; project grep
    (key-chord-define-oneway projectile-mode-map "PB" 'projectile-switch-to-buffer) ;; project buffer
    (key-chord-define-oneway projectile-mode-map "PR" 'projectile-recentf) ;; project recent
    )
  )
;; <<< E N D key-chord

;; >>> START generic modes
(require 'generic-x)
(define-generic-mode 'quan-journal-mode
  '() ;; comment start list
  '() ;; preserved key words list
  '(("\\(^>[^<]*<$\\)" . 'font-lock-comment-face)
    ("\\(==.*=\\)" . 'font-lock-constant-face)
    ("\\(\*.*\*\\)" . 'font-lock-variable-name-face)
    ("\\(vim:.*\\)" . 'font-lock-comment-face)
    ("\\(^>$\\)" . 'font-lock-comment-face)
    ("\\(^   .*\\)" . 'font-lock-comment-face)
    ("\\(^<$\\)" . 'font-lock-comment-face)) ;; customized render
  '("journal.*$")
  nil
  "A mode for writting my journal in emacs, originally in vm help format"
  )
;; <<< E N D generic modes

;; >>> START org
(when (package-installed-p 'org)
  ;;org mode work flow
  (setq org-todo-keywords 
        '((sequence "TODO(1!)" "DOING(2!)" "BLOCKED(3@/!)" "REVIEW(4)" "|" "DONE(5!)" "ARCHIVED(6@)")))
  (setq org-todo-keyword-faces
        '(("TODO" . "#FFE87C")
          ("DOING" . "#6AFB92")
          ("BLOCKED" . "red")
          ("REVIEW" . "#659EC7")
          ("DONE" . "#98AFC7")
          ("ARCHIVED" .  "gray")))
)
;; <<< E N D org

;; >>> START themes
(when (and (package-installed-p 'monokai-theme) (package-installed-p 'zenburn-theme))
  ;; theme setting
  (if (display-graphic-p)
      (load-theme 'monokai t)
    (load-theme 'zenburn t)
    )
  )
;;cursor
(when (display-graphic-p)
  (setq-default cursor-type 'hollow)
  (set-cursor-color "#6AFB92")
  (blink-cursor-mode 0)
)
;;transparency
(when (and (display-graphic-p) nil)
    (set-frame-parameter (selected-frame) 'alpha '(85 50))
)
;; <<< E N D themes

;; >>> START functions for emacs shells
(when nil
  ;; set $PATH for shells
  (when (display-graphic-p)
    (let '(path "/Users/sstvn/Dev/Applications/groovy-2.1.9/bin:/Users/sstvn/springsource/spring-roo-1.2.4.RELEASE/bin:/Users/sstvn/Dev/Applications/mongodb-osx-x86_64-2.4.8/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/Users/sstvn/Dev/Applications/vert.x-2.0.2-final/bin:/Users/sstvn/Dev/Applications/apache-maven-3.1.1/bin:/usr/local/mysql/bin:/Users/sstvn/Dev/ShellScript:/Users/sstvn/clojure:/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home:/Users/sstvn/scala-2.11.4/bin")
      (setenv "PATH" path)
      (setq exec-path
            (append
             (split-string-and-unquote path ":")
             exec-path)))
    (setenv "JAVA_HOME" "/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home")
    )
  ;; shells with different buffer names
  (defun bash (buffer-name)
    "Start a terminal and rename buffer."
    (interactive "sbuffer name: ")
    (term "/bin/bash")
    (rename-buffer buffer-name t))
  (defun zsh (buffer-name)
    "Start a terminal and rename buffer."
    (interactive "sbuffer name: ")
    (term "/bin/zsh")
    (rename-buffer buffer-name t))
  (defun fish (buffer-name)
    "Start a terminal with BUFFER-NAME."
    (interactive "sbuffer name:")
    (term "/usr/local/bin/fish")
    (rename-buffer buffer-name t))
  )
;; <<< E N D functions for emacs shells

;; <<<<<<< E N D re-organizing configuration

;; startup files
;(find-file "~/tryorg.org")
;(find-file "~/emacs-cheat-sheet.org")
;(find-file "~/vms-maven/.projectile")

;;; .emacs ends here
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes (quote ("9dae95cdbed1505d45322ef8b5aa90ccb6cb59e0ff26fef0b8f411dfc416c552" "70cf411fbf9512a4da81aa1e87b064d3a3f0a47b19d7a4850578c8d64cac2353" default))))

